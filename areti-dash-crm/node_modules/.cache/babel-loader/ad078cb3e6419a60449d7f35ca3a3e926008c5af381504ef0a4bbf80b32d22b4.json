{"ast":null,"code":"import { Auth0Client } from '@auth0/auth0-spa-js';\nimport config from '../config';\nimport axios from 'axios';\nlet auth0Client = null;\nlet cachedUser = null;\n\n// Initialize Auth0 client\nconst initAuth0 = async () => {\n  if (auth0Client) return auth0Client;\n  auth0Client = new Auth0Client({\n    domain: config.auth0Domain,\n    client_id: config.auth0ClientId,\n    redirect_uri: `${window.location.origin}/callback`,\n    audience: config.audience,\n    cacheLocation: 'localstorage'\n  });\n  try {\n    // Handle callback if code is present in URL\n    if (window.location.search.includes(\"code=\")) {\n      await auth0Client.handleRedirectCallback();\n      window.history.replaceState({}, document.title, \"/\");\n    }\n\n    // Check if user is authenticated\n    const isAuthenticated = await auth0Client.isAuthenticated();\n    if (isAuthenticated) {\n      // Get user info and cache it\n      cachedUser = await auth0Client.getUser();\n\n      // Get the Auth0 token\n      const token = await auth0Client.getTokenSilently();\n\n      // Exchange with our service\n      try {\n        const response = await axios.post(`${config.authServiceUrl}/auth/token`, {\n          token\n        });\n\n        // Store in localStorage\n        if (response.data && response.data.token) {\n          const userInfo = {\n            name: cachedUser.name || cachedUser.nickname || 'User',\n            email: cachedUser.email || 'user@example.com',\n            role: 'admin',\n            // Customize as needed\n            token: response.data.token,\n            timestamp: new Date().getTime()\n          };\n          localStorage.setItem('aretiUser', JSON.stringify(userInfo));\n        }\n      } catch (error) {\n        console.error('Token exchange error:', error);\n      }\n    }\n  } catch (error) {\n    console.error('Auth0 initialization error:', error);\n  }\n  return auth0Client;\n};\n\n// Authentication service\nconst AuthService = {\n  // Initialize\n  init: async () => {\n    try {\n      // Check for cached user in localStorage\n      const userFromStorage = localStorage.getItem('aretiUser');\n      if (userFromStorage) {\n        try {\n          const userData = JSON.parse(userFromStorage);\n          const now = new Date().getTime();\n\n          // Check if token is not expired (24 hour validity)\n          if (now - userData.timestamp < 24 * 60 * 60 * 1000) {\n            console.log('Found valid user in localStorage');\n            cachedUser = userData;\n            return true;\n          }\n        } catch (e) {\n          console.error('Error parsing user from localStorage:', e);\n        }\n      }\n\n      // Initialize Auth0\n      await initAuth0();\n\n      // Return authentication status\n      return !!cachedUser;\n    } catch (error) {\n      console.error('Auth initialization error:', error);\n      return false;\n    }\n  },\n  // Login\n  login: async () => {\n    try {\n      const client = await initAuth0();\n      await client.loginWithRedirect();\n    } catch (error) {\n      console.error('Login error:', error);\n    }\n  },\n  // Logout\n  logout: async () => {\n    try {\n      // Clear local storage\n      localStorage.removeItem('aretiUser');\n\n      // Clear cached user\n      cachedUser = null;\n\n      // Logout from Auth0\n      const client = await initAuth0();\n      await client.logout({\n        returnTo: window.location.origin\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n      window.location.reload();\n    }\n  },\n  // Check if authenticated\n  isAuthenticated: () => {\n    return !!cachedUser || !!localStorage.getItem('aretiUser');\n  },\n  // Get user profile\n  getUserProfile: () => {\n    if (cachedUser) return cachedUser;\n    const userFromStorage = localStorage.getItem('aretiUser');\n    if (userFromStorage) {\n      try {\n        return JSON.parse(userFromStorage);\n      } catch (error) {\n        console.error('Error parsing user data:', error);\n      }\n    }\n    return null;\n  },\n  // Get authorization header\n  getAuthHeader: () => {\n    const userFromStorage = localStorage.getItem('aretiUser');\n    if (userFromStorage) {\n      try {\n        const userData = JSON.parse(userFromStorage);\n        if (userData.token) {\n          return {\n            'Authorization': `Bearer ${userData.token}`\n          };\n        }\n      } catch (error) {\n        console.error('Error creating auth header:', error);\n      }\n    }\n    return {};\n  }\n};\nexport default AuthService;","map":{"version":3,"names":["Auth0Client","config","axios","auth0Client","cachedUser","initAuth0","domain","auth0Domain","client_id","auth0ClientId","redirect_uri","window","location","origin","audience","cacheLocation","search","includes","handleRedirectCallback","history","replaceState","document","title","isAuthenticated","getUser","token","getTokenSilently","response","post","authServiceUrl","data","userInfo","name","nickname","email","role","timestamp","Date","getTime","localStorage","setItem","JSON","stringify","error","console","AuthService","init","userFromStorage","getItem","userData","parse","now","log","e","login","client","loginWithRedirect","logout","removeItem","returnTo","reload","getUserProfile","getAuthHeader"],"sources":["C:/Users/Administrator/Desktop/aretialliance/areti-dash-crm/src/services/auth.js"],"sourcesContent":["import { Auth0Client } from '@auth0/auth0-spa-js';\r\nimport config from '../config';\r\nimport axios from 'axios';\r\n\r\nlet auth0Client = null;\r\nlet cachedUser = null;\r\n\r\n// Initialize Auth0 client\r\nconst initAuth0 = async () => {\r\n  if (auth0Client) return auth0Client;\r\n  \r\n  auth0Client = new Auth0Client({\r\n    domain: config.auth0Domain,\r\n    client_id: config.auth0ClientId,\r\n    redirect_uri: `${window.location.origin}/callback`,\r\n    audience: config.audience,\r\n    cacheLocation: 'localstorage'\r\n  });\r\n\r\n  try {\r\n    // Handle callback if code is present in URL\r\n    if (window.location.search.includes(\"code=\")) {\r\n      await auth0Client.handleRedirectCallback();\r\n      window.history.replaceState({}, document.title, \"/\");\r\n    }\r\n    \r\n    // Check if user is authenticated\r\n    const isAuthenticated = await auth0Client.isAuthenticated();\r\n    \r\n    if (isAuthenticated) {\r\n      // Get user info and cache it\r\n      cachedUser = await auth0Client.getUser();\r\n      \r\n      // Get the Auth0 token\r\n      const token = await auth0Client.getTokenSilently();\r\n      \r\n      // Exchange with our service\r\n      try {\r\n        const response = await axios.post(`${config.authServiceUrl}/auth/token`, {\r\n          token\r\n        });\r\n        \r\n        // Store in localStorage\r\n        if (response.data && response.data.token) {\r\n          const userInfo = {\r\n            name: cachedUser.name || cachedUser.nickname || 'User',\r\n            email: cachedUser.email || 'user@example.com',\r\n            role: 'admin', // Customize as needed\r\n            token: response.data.token,\r\n            timestamp: new Date().getTime()\r\n          };\r\n          \r\n          localStorage.setItem('aretiUser', JSON.stringify(userInfo));\r\n        }\r\n      } catch (error) {\r\n        console.error('Token exchange error:', error);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Auth0 initialization error:', error);\r\n  }\r\n  \r\n  return auth0Client;\r\n};\r\n\r\n// Authentication service\r\nconst AuthService = {\r\n  // Initialize\r\n  init: async () => {\r\n    try {\r\n      // Check for cached user in localStorage\r\n      const userFromStorage = localStorage.getItem('aretiUser');\r\n      if (userFromStorage) {\r\n        try {\r\n          const userData = JSON.parse(userFromStorage);\r\n          const now = new Date().getTime();\r\n          \r\n          // Check if token is not expired (24 hour validity)\r\n          if (now - userData.timestamp < 24 * 60 * 60 * 1000) {\r\n            console.log('Found valid user in localStorage');\r\n            cachedUser = userData;\r\n            return true;\r\n          }\r\n        } catch (e) {\r\n          console.error('Error parsing user from localStorage:', e);\r\n        }\r\n      }\r\n      \r\n      // Initialize Auth0\r\n      await initAuth0();\r\n      \r\n      // Return authentication status\r\n      return !!cachedUser;\r\n    } catch (error) {\r\n      console.error('Auth initialization error:', error);\r\n      return false;\r\n    }\r\n  },\r\n\r\n  // Login\r\n  login: async () => {\r\n    try {\r\n      const client = await initAuth0();\r\n      await client.loginWithRedirect();\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n    }\r\n  },\r\n\r\n  // Logout\r\n  logout: async () => {\r\n    try {\r\n      // Clear local storage\r\n      localStorage.removeItem('aretiUser');\r\n      \r\n      // Clear cached user\r\n      cachedUser = null;\r\n      \r\n      // Logout from Auth0\r\n      const client = await initAuth0();\r\n      await client.logout({\r\n        returnTo: window.location.origin\r\n      });\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n      window.location.reload();\r\n    }\r\n  },\r\n\r\n  // Check if authenticated\r\n  isAuthenticated: () => {\r\n    return !!cachedUser || !!localStorage.getItem('aretiUser');\r\n  },\r\n\r\n  // Get user profile\r\n  getUserProfile: () => {\r\n    if (cachedUser) return cachedUser;\r\n    \r\n    const userFromStorage = localStorage.getItem('aretiUser');\r\n    if (userFromStorage) {\r\n      try {\r\n        return JSON.parse(userFromStorage);\r\n      } catch (error) {\r\n        console.error('Error parsing user data:', error);\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  },\r\n\r\n  // Get authorization header\r\n  getAuthHeader: () => {\r\n    const userFromStorage = localStorage.getItem('aretiUser');\r\n    if (userFromStorage) {\r\n      try {\r\n        const userData = JSON.parse(userFromStorage);\r\n        if (userData.token) {\r\n          return {\r\n            'Authorization': `Bearer ${userData.token}`\r\n          };\r\n        }\r\n      } catch (error) {\r\n        console.error('Error creating auth header:', error);\r\n      }\r\n    }\r\n    \r\n    return {};\r\n  }\r\n};\r\n\r\nexport default AuthService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}