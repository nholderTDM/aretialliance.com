{"ast":null,"code":"import axios from'axios';import AuthService from'./auth';const API_URL=process.env.REACT_APP_API_URL||'https://api.aretialliance.com';// Create axios instance with default config\nconst apiClient=axios.create({baseURL:API_URL,headers:{'Content-Type':'application/json'}});// Add request interceptor to add auth token\napiClient.interceptors.request.use(config=>{// Add authorization header with JWT token if available\nconst authHeader=AuthService.getAuthHeader();if(authHeader&&authHeader.Authorization){config.headers.Authorization=authHeader.Authorization;}return config;},error=>{return Promise.reject(error);});// Add response interceptor to handle common errors\napiClient.interceptors.response.use(response=>response,error=>{// Handle authentication errors\nif(error.response&&error.response.status===401){// Redirect to login page\nAuthService.logout();window.location.reload();}return Promise.reject(error);});// Mock data generators for development\nconst generateMockContacts=function(){let count=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;const statuses=['lead','opportunity','customer','partner'];return Array.from({length:count},(_,i)=>({id:`contact-${i+1}`,name:`Contact ${i+1}`,email:`contact${i+1}@example.com`,phone:`(555) ${100+i}-${1000+i}`,company:`Company ${i+1}`,status:statuses[Math.floor(Math.random()*statuses.length)],notes:`Notes about contact ${i+1}`,createdAt:new Date(Date.now()-Math.random()*10000000000).toISOString(),updatedAt:new Date(Date.now()-Math.random()*1000000000).toISOString()}));};const generateMockOrganizations=function(){let count=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;const sizes=['small','medium','large'];return Array.from({length:count},(_,i)=>({id:`org-${i+1}`,name:`Organization ${i+1}`,industry:`Industry ${i%5+1}`,website:`https://org${i+1}.example.com`,size:sizes[Math.floor(Math.random()*sizes.length)],address:`${1000+i} Main St, City ${i+1}, State`,notes:`Notes about organization ${i+1}`,createdAt:new Date(Date.now()-Math.random()*10000000000).toISOString(),updatedAt:new Date(Date.now()-Math.random()*1000000000).toISOString()}));};const generateMockTasks=function(){let count=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;const statuses=['pending','in-progress','completed'];const priorities=['low','medium','high'];return Array.from({length:count},(_,i)=>({id:`task-${i+1}`,title:`Task ${i+1}`,description:`Description for task ${i+1}`,dueDate:new Date(Date.now()+(Math.random()*20-10)*86400000).toISOString(),priority:priorities[Math.floor(Math.random()*priorities.length)],status:statuses[Math.floor(Math.random()*statuses.length)],contactId:Math.random()>0.3?`contact-${Math.floor(Math.random()*count)+1}`:null,createdAt:new Date(Date.now()-Math.random()*10000000000).toISOString(),updatedAt:new Date(Date.now()-Math.random()*1000000000).toISOString()}));};const generateMockDrivers=function(){let count=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;const statuses=['active','inactive','pending'];const vehicleTypes=['car','suv','cargo','truck'];return Array.from({length:count},(_,i)=>({id:`driver-${i+1}`,name:`Driver ${i+1}`,email:`driver${i+1}@example.com`,phone:`(555) ${200+i}-${2000+i}`,vehicleType:vehicleTypes[Math.floor(Math.random()*vehicleTypes.length)],licenseNumber:`DL${10000+i}`,status:statuses[Math.floor(Math.random()*statuses.length)],address:`${2000+i} Oak St, City ${i+1}, State`,notes:`Notes about driver ${i+1}`,createdAt:new Date(Date.now()-Math.random()*10000000000).toISOString(),updatedAt:new Date(Date.now()-Math.random()*1000000000).toISOString()}));};const generateMockDeliveries=function(){let count=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;const statuses=['pending','in-transit','delivered','canceled'];const priorities=['standard','express','rush'];return Array.from({length:count},(_,i)=>({id:`delivery-${i+1}`,trackingNumber:`ARETI-${100000+i}`,description:`Delivery ${i+1}`,status:statuses[Math.floor(Math.random()*statuses.length)],priority:priorities[Math.floor(Math.random()*priorities.length)],pickupAddress:`${3000+i} Pickup St, City ${i%5+1}, State`,deliveryAddress:`${4000+i} Delivery St, City ${(i+3)%5+1}, State`,scheduledDate:new Date(Date.now()+(Math.random()*10-5)*86400000).toISOString(),organizationId:Math.random()>0.3?`org-${Math.floor(Math.random()*count)+1}`:null,driverId:Math.random()>0.3?`driver-${Math.floor(Math.random()*count)+1}`:null,notes:`Notes about delivery ${i+1}`,createdAt:new Date(Date.now()-Math.random()*10000000000).toISOString(),updatedAt:new Date(Date.now()-Math.random()*1000000000).toISOString()}));};const generateMockQuotes=function(){let count=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;const statuses=['pending','approved','rejected','expired'];const speeds=['standard','same-day','express','rush'];return Array.from({length:count},(_,i)=>({id:`quote-${i+1}`,quoteNumber:`QT-${200000+i}`,customerName:`Customer ${i+1}`,customerEmail:`customer${i+1}@example.com`,customerPhone:`(555) ${300+i}-${3000+i}`,company:Math.random()>0.3?`Company ${i%5+1}`:'',status:statuses[Math.floor(Math.random()*statuses.length)],totalAmount:Math.floor(5000+Math.random()*15000)/100,validUntil:new Date(Date.now()+Math.random()*30*86400000).toISOString(),pickupZip:`${10000+i%10}`,deliveryZip:`${20000+i%10}`,packageDetails:`${1+Math.floor(Math.random()*3)} packages, ${5+Math.floor(Math.random()*45)}lbs total`,deliverySpeed:speeds[Math.floor(Math.random()*speeds.length)],contactId:Math.random()>0.3?`contact-${Math.floor(Math.random()*count)+1}`:null,notes:`Quote notes ${i+1}`,createdAt:new Date(Date.now()-Math.random()*10000000000).toISOString(),updatedAt:new Date(Date.now()-Math.random()*1000000000).toISOString()}));};const generateMockRoutes=function(){let count=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;const statuses=['active','inactive'];const days=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'];return Array.from({length:count},(_,i)=>({id:`route-${i+1}`,name:`Route ${i+1}`,startLocation:`${5000+i} Start St, City ${i%5+1}, State`,endLocation:`${6000+i} End St, City ${(i+2)%5+1}, State`,distance:Math.floor(10+Math.random()*100),estimatedTime:Math.floor(15+Math.random()*120),status:statuses[Math.floor(Math.random()*statuses.length)],averageDeliveries:Math.floor(5+Math.random()*20),deliveryDays:Array.from({length:1+Math.floor(Math.random()*5)},()=>days[Math.floor(Math.random()*days.length)]).filter((day,index,self)=>self.indexOf(day)===index),// Remove duplicates\nnotes:`Route notes ${i+1}`,createdAt:new Date(Date.now()-Math.random()*10000000000).toISOString(),updatedAt:new Date(Date.now()-Math.random()*1000000000).toISOString()}));};const generateMockRevenueData=function(){let timeframe=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'month';// Generate monthly revenue data\nconst monthlyData=Array.from({length:12},(_,i)=>({name:new Date(2024,i,1).toLocaleString('default',{month:'short'}),amount:Math.floor(10000+Math.random()*50000)}));// Generate quarterly revenue data\nconst quarterlyData=Array.from({length:4},(_,i)=>({name:`Q${i+1} 2024`,amount:Math.floor(50000+Math.random()*100000)}));// Generate yearly revenue data\nconst yearlyData=Array.from({length:5},(_,i)=>({name:`${2020+i}`,amount:Math.floor(200000+Math.random()*500000)}));// Generate revenue by service type\nconst byServiceData=[{name:'Standard Delivery',amount:Math.floor(50000+Math.random()*100000)},{name:'Same-Day Delivery',amount:Math.floor(40000+Math.random()*80000)},{name:'Express Delivery',amount:Math.floor(30000+Math.random()*60000)},{name:'Rush Delivery',amount:Math.floor(20000+Math.random()*40000)},{name:'Custom Logistics',amount:Math.floor(10000+Math.random()*30000)}];// Generate top customers\nconst topCustomers=Array.from({length:5},(_,i)=>({name:`Customer ${i+1}`,company:`Company ${i+1}`,totalRevenue:Math.floor(10000+Math.random()*50000),orderCount:Math.floor(10+Math.random()*90),averageOrderValue:Math.floor(500+Math.random()*1500)}));// Calculate total revenue for current year and month\nconst totalYear=yearlyData[yearlyData.length-1].amount;const totalMonth=monthlyData[new Date().getMonth()].amount;// Generate comparison percentages\nconst comparisonToLastMonth=-10+Math.random()*30;// -10% to +20%\nconst comparisonToLastYear=-5+Math.random()*25;// -5% to +20%\nreturn{monthly:monthlyData,quarterly:quarterlyData,yearly:yearlyData,byService:byServiceData,topCustomers:topCustomers,totalYear,totalMonth,comparisonToLastMonth,comparisonToLastYear,averageOrderValue:Math.floor(500+Math.random()*500),highestRevenueRoute:{name:`Route ${Math.floor(Math.random()*10)+1}`,amount:Math.floor(10000+Math.random()*20000)}};};const generateMockPerformanceData=function(){let timeframe=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'week';// Generate delivery performance data\nlet performanceDates=[];let numPoints=0;if(timeframe==='week'){// Last 7 days\nnumPoints=7;const today=new Date();for(let i=6;i>=0;i--){const date=new Date(today);date.setDate(today.getDate()-i);performanceDates.push(date.toLocaleDateString('en-US',{month:'short',day:'numeric'}));}}else if(timeframe==='month'){// Last 30 days, weekly data points\nnumPoints=4;const today=new Date();for(let i=3;i>=0;i--){const date=new Date(today);date.setDate(today.getDate()-i*7);performanceDates.push(date.toLocaleDateString('en-US',{month:'short',day:'numeric'}));}}else{// Quarterly, last 3 months\nnumPoints=3;const today=new Date();for(let i=2;i>=0;i--){const date=new Date(today);date.setMonth(today.getMonth()-i);performanceDates.push(date.toLocaleDateString('en-US',{month:'short',year:'numeric'}));}}// Generate delivery performance data\nconst deliveryPerformance=performanceDates.map(date=>({date,deliveries:Math.floor(20+Math.random()*80),onTimePercentage:Math.floor(75+Math.random()*20)}));// Generate driver performance data\nconst driverPerformance=Array.from({length:5},(_,i)=>({name:`Driver ${i+1}`,onTimePercentage:Math.floor(75+Math.random()*25)}));// Generate customer satisfaction data\nconst customerSatisfaction=performanceDates.map(date=>({date,score:3.5+Math.random()*1.5}));// Generate delivery status distribution\nconst onTime=Math.floor(70+Math.random()*20);const delayed=Math.floor(10+Math.random()*15);const veryDelayed=100-onTime-delayed;// Generate performance insights\nconst insightTypes=['positive','warning','negative'];const insights=Array.from({length:Math.floor(1+Math.random()*3)},(_,i)=>{const type=insightTypes[Math.floor(Math.random()*3)];return{type,title:type==='positive'?'Performance Improvement':type==='warning'?'Potential Issue Detected':'Performance Concern',description:type==='positive'?`On-time delivery rates have improved by ${Math.floor(2+Math.random()*8)}% over the last period.`:type==='warning'?`Delivery times for Route ${Math.floor(Math.random()*10)+1} are trending 10-15% longer than average.`:`Customer satisfaction scores for rush deliveries have decreased by ${Math.floor(2+Math.random()*8)}% this period.`};});return{deliveryPerformance,driverPerformance,customerSatisfaction,deliveryStatus:{onTime,delayed,veryDelayed},avgDeliveryTime:Math.floor(30+Math.random()*40),completionRate:(75+Math.random()*20)/100,avgSatisfactionScore:3.8+Math.random()*0.9,insights};};// API Service methods\nconst ApiService={// Contacts\nasync getContacts(){try{const response=await apiClient.get('/contacts');return response.data;}catch(error){console.error('Error fetching contacts:',error);// For development, return mock data\nreturn generateMockContacts();}},async getContact(id){try{const response=await apiClient.get(`/contacts/${id}`);return response.data;}catch(error){console.error(`Error fetching contact ${id}:`,error);return null;}},async createContact(data){try{const response=await apiClient.post('/contacts',data);return response.data;}catch(error){console.error('Error creating contact:',error);return null;}},async updateContact(id,data){try{const response=await apiClient.put(`/contacts/${id}`,data);return response.data;}catch(error){console.error(`Error updating contact ${id}:`,error);return null;}},async deleteContact(id){try{await apiClient.delete(`/contacts/${id}`);return true;}catch(error){console.error(`Error deleting contact ${id}:`,error);return false;}},// Organizations\nasync getOrganizations(){try{const response=await apiClient.get('/organizations');return response.data;}catch(error){console.error('Error fetching organizations:',error);// For development, return mock data\nreturn generateMockOrganizations();}},async getOrganization(id){try{const response=await apiClient.get(`/organizations/${id}`);return response.data;}catch(error){console.error(`Error fetching organization ${id}:`,error);return null;}},async createOrganization(data){try{const response=await apiClient.post('/organizations',data);return response.data;}catch(error){console.error('Error creating organization:',error);return null;}},async updateOrganization(id,data){try{const response=await apiClient.put(`/organizations/${id}`,data);return response.data;}catch(error){console.error(`Error updating organization ${id}:`,error);return null;}},async deleteOrganization(id){try{await apiClient.delete(`/organizations/${id}`);return true;}catch(error){console.error(`Error deleting organization ${id}:`,error);return false;}},// Tasks\nasync getTasks(){try{const response=await apiClient.get('/tasks');return response.data;}catch(error){console.error('Error fetching tasks:',error);// For development, return mock data\nreturn generateMockTasks();}},async getTask(id){try{const response=await apiClient.get(`/tasks/${id}`);return response.data;}catch(error){console.error(`Error fetching task ${id}:`,error);return null;}},async createTask(data){try{const response=await apiClient.post('/tasks',data);return response.data;}catch(error){console.error('Error creating task:',error);return null;}},async updateTask(id,data){try{const response=await apiClient.put(`/tasks/${id}`,data);return response.data;}catch(error){console.error(`Error updating task ${id}:`,error);return null;}},async deleteTask(id){try{await apiClient.delete(`/tasks/${id}`);return true;}catch(error){console.error(`Error deleting task ${id}:`,error);return false;}},// Drivers\nasync getDrivers(){try{const response=await apiClient.get('/drivers');return response.data;}catch(error){console.error('Error fetching drivers:',error);// For development, return mock data\nreturn generateMockDrivers();}},async getDriver(id){try{const response=await apiClient.get(`/drivers/${id}`);return response.data;}catch(error){console.error(`Error fetching driver ${id}:`,error);return null;}},async createDriver(data){try{const response=await apiClient.post('/drivers',data);return response.data;}catch(error){console.error('Error creating driver:',error);return null;}},async updateDriver(id,data){try{const response=await apiClient.put(`/drivers/${id}`,data);return response.data;}catch(error){console.error(`Error updating driver ${id}:`,error);return null;}},async deleteDriver(id){try{await apiClient.delete(`/drivers/${id}`);return true;}catch(error){console.error(`Error deleting driver ${id}:`,error);return false;}},// Deliveries\nasync getDeliveries(){try{const response=await apiClient.get('/deliveries');return response.data;}catch(error){console.error('Error fetching deliveries:',error);// For development, return mock data\nreturn generateMockDeliveries();}},async getDelivery(id){try{const response=await apiClient.get(`/deliveries/${id}`);return response.data;}catch(error){console.error(`Error fetching delivery ${id}:`,error);return null;}},async createDelivery(data){try{const response=await apiClient.post('/deliveries',data);return response.data;}catch(error){console.error('Error creating delivery:',error);return null;}},async updateDelivery(id,data){try{const response=await apiClient.put(`/deliveries/${id}`,data);return response.data;}catch(error){console.error(`Error updating delivery ${id}:`,error);return null;}},async deleteDelivery(id){try{await apiClient.delete(`/deliveries/${id}`);return true;}catch(error){console.error(`Error deleting delivery ${id}:`,error);return false;}},// Quotes\nasync getQuotes(){try{const response=await apiClient.get('/quotes');return response.data;}catch(error){console.error('Error fetching quotes:',error);// For development, return mock data\nreturn generateMockQuotes();}},async getQuote(id){try{const response=await apiClient.get(`/quotes/${id}`);return response.data;}catch(error){console.error(`Error fetching quote ${id}:`,error);return null;}},async createQuote(data){try{const response=await apiClient.post('/quotes',data);return response.data;}catch(error){console.error('Error creating quote:',error);return null;}},async updateQuote(id,data){try{const response=await apiClient.put(`/quotes/${id}`,data);return response.data;}catch(error){console.error(`Error updating quote ${id}:`,error);return null;}},async deleteQuote(id){try{await apiClient.delete(`/quotes/${id}`);return true;}catch(error){console.error(`Error deleting quote ${id}:`,error);return false;}},async createDeliveryFromQuote(quoteId){try{const response=await apiClient.post(`/quotes/${quoteId}/convert-to-delivery`);return response.data;}catch(error){console.error(`Error converting quote ${quoteId} to delivery:`,error);return null;}},// Routes\nasync getRoutes(){try{const response=await apiClient.get('/routes');return response.data;}catch(error){console.error('Error fetching routes:',error);// For development, return mock data\nreturn generateMockRoutes();}},async getRoute(id){try{const response=await apiClient.get(`/routes/${id}`);return response.data;}catch(error){console.error(`Error fetching route ${id}:`,error);return null;}},async createRoute(data){try{const response=await apiClient.post('/routes',data);return response.data;}catch(error){console.error('Error creating route:',error);return null;}},async updateRoute(id,data){try{const response=await apiClient.put(`/routes/${id}`,data);return response.data;}catch(error){console.error(`Error updating route ${id}:`,error);return null;}},async deleteRoute(id){try{await apiClient.delete(`/routes/${id}`);return true;}catch(error){console.error(`Error deleting route ${id}:`,error);return false;}},// Revenue Data\nasync getRevenueData(){let dateRange=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'month';try{const response=await apiClient.get(`/analytics/revenue?range=${dateRange}`);return response.data;}catch(error){console.error(`Error fetching revenue data:`,error);// For development, return mock data\nreturn generateMockRevenueData(dateRange);}},// Performance Data\nasync getPerformanceData(){let timeFrame=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'week';try{const response=await apiClient.get(`/analytics/performance?timeFrame=${timeFrame}`);return response.data;}catch(error){console.error(`Error fetching performance data:`,error);// For development, return mock data\nreturn generateMockPerformanceData(timeFrame);}},// Dashboard Data\nasync getDashboardData(){try{const response=await apiClient.get('/analytics/dashboard');return response.data;}catch(error){console.error('Error fetching dashboard data:',error);// For development, create mock dashboard data\nreturn{stats:{totalContacts:100+Math.floor(Math.random()*50),totalOrganizations:50+Math.floor(Math.random()*30),activeDrivers:20+Math.floor(Math.random()*15),pendingDeliveries:30+Math.floor(Math.random()*20),totalRevenue:50000+Math.floor(Math.random()*50000),onTimeDeliveryRate:85+Math.floor(Math.random()*10)},recentActivity:Array.from({length:5},(_,i)=>({id:`activity-${i+1}`,type:['delivery','quote','contact','driver'][Math.floor(Math.random()*4)],description:`Recent activity ${i+1}`,timestamp:new Date(Date.now()-Math.random()*86400000*5).toISOString()}))};}}};export default ApiService;","map":{"version":3,"names":["axios","AuthService","API_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","authHeader","getAuthHeader","Authorization","error","Promise","reject","response","status","logout","window","location","reload","generateMockContacts","count","arguments","length","undefined","statuses","Array","from","_","i","id","name","email","phone","company","Math","floor","random","notes","createdAt","Date","now","toISOString","updatedAt","generateMockOrganizations","sizes","industry","website","size","address","generateMockTasks","priorities","title","description","dueDate","priority","contactId","generateMockDrivers","vehicleTypes","vehicleType","licenseNumber","generateMockDeliveries","trackingNumber","pickupAddress","deliveryAddress","scheduledDate","organizationId","driverId","generateMockQuotes","speeds","quoteNumber","customerName","customerEmail","customerPhone","totalAmount","validUntil","pickupZip","deliveryZip","packageDetails","deliverySpeed","generateMockRoutes","days","startLocation","endLocation","distance","estimatedTime","averageDeliveries","deliveryDays","filter","day","index","self","indexOf","generateMockRevenueData","timeframe","monthlyData","toLocaleString","month","amount","quarterlyData","yearlyData","byServiceData","topCustomers","totalRevenue","orderCount","averageOrderValue","totalYear","totalMonth","getMonth","comparisonToLastMonth","comparisonToLastYear","monthly","quarterly","yearly","byService","highestRevenueRoute","generateMockPerformanceData","performanceDates","numPoints","today","date","setDate","getDate","push","toLocaleDateString","setMonth","year","deliveryPerformance","map","deliveries","onTimePercentage","driverPerformance","customerSatisfaction","score","onTime","delayed","veryDelayed","insightTypes","insights","type","deliveryStatus","avgDeliveryTime","completionRate","avgSatisfactionScore","ApiService","getContacts","get","data","console","getContact","createContact","post","updateContact","put","deleteContact","delete","getOrganizations","getOrganization","createOrganization","updateOrganization","deleteOrganization","getTasks","getTask","createTask","updateTask","deleteTask","getDrivers","getDriver","createDriver","updateDriver","deleteDriver","getDeliveries","getDelivery","createDelivery","updateDelivery","deleteDelivery","getQuotes","getQuote","createQuote","updateQuote","deleteQuote","createDeliveryFromQuote","quoteId","getRoutes","getRoute","createRoute","updateRoute","deleteRoute","getRevenueData","dateRange","getPerformanceData","timeFrame","getDashboardData","stats","totalContacts","totalOrganizations","activeDrivers","pendingDeliveries","onTimeDeliveryRate","recentActivity","timestamp"],"sources":["C:/Users/Administrator/Desktop/aretialliance/areti-dash-crm/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport AuthService from './auth';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'https://api.aretialliance.com';\r\n\r\n// Create axios instance with default config\r\nconst apiClient = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Add request interceptor to add auth token\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    // Add authorization header with JWT token if available\r\n    const authHeader = AuthService.getAuthHeader();\r\n    if (authHeader && authHeader.Authorization) {\r\n      config.headers.Authorization = authHeader.Authorization;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor to handle common errors\r\napiClient.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    // Handle authentication errors\r\n    if (error.response && error.response.status === 401) {\r\n      // Redirect to login page\r\n      AuthService.logout();\r\n      window.location.reload();\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Mock data generators for development\r\nconst generateMockContacts = (count = 10) => {\r\n  const statuses = ['lead', 'opportunity', 'customer', 'partner'];\r\n  return Array.from({ length: count }, (_, i) => ({\r\n    id: `contact-${i + 1}`,\r\n    name: `Contact ${i + 1}`,\r\n    email: `contact${i + 1}@example.com`,\r\n    phone: `(555) ${100 + i}-${1000 + i}`,\r\n    company: `Company ${i + 1}`,\r\n    status: statuses[Math.floor(Math.random() * statuses.length)],\r\n    notes: `Notes about contact ${i + 1}`,\r\n    createdAt: new Date(Date.now() - Math.random() * 10000000000).toISOString(),\r\n    updatedAt: new Date(Date.now() - Math.random() * 1000000000).toISOString()\r\n  }));\r\n};\r\n\r\nconst generateMockOrganizations = (count = 10) => {\r\n  const sizes = ['small', 'medium', 'large'];\r\n  return Array.from({ length: count }, (_, i) => ({\r\n    id: `org-${i + 1}`,\r\n    name: `Organization ${i + 1}`,\r\n    industry: `Industry ${i % 5 + 1}`,\r\n    website: `https://org${i + 1}.example.com`,\r\n    size: sizes[Math.floor(Math.random() * sizes.length)],\r\n    address: `${1000 + i} Main St, City ${i + 1}, State`,\r\n    notes: `Notes about organization ${i + 1}`,\r\n    createdAt: new Date(Date.now() - Math.random() * 10000000000).toISOString(),\r\n    updatedAt: new Date(Date.now() - Math.random() * 1000000000).toISOString()\r\n  }));\r\n};\r\n\r\nconst generateMockTasks = (count = 10) => {\r\n  const statuses = ['pending', 'in-progress', 'completed'];\r\n  const priorities = ['low', 'medium', 'high'];\r\n  return Array.from({ length: count }, (_, i) => ({\r\n    id: `task-${i + 1}`,\r\n    title: `Task ${i + 1}`,\r\n    description: `Description for task ${i + 1}`,\r\n    dueDate: new Date(Date.now() + (Math.random() * 20 - 10) * 86400000).toISOString(),\r\n    priority: priorities[Math.floor(Math.random() * priorities.length)],\r\n    status: statuses[Math.floor(Math.random() * statuses.length)],\r\n    contactId: Math.random() > 0.3 ? `contact-${Math.floor(Math.random() * count) + 1}` : null,\r\n    createdAt: new Date(Date.now() - Math.random() * 10000000000).toISOString(),\r\n    updatedAt: new Date(Date.now() - Math.random() * 1000000000).toISOString()\r\n  }));\r\n};\r\n\r\nconst generateMockDrivers = (count = 10) => {\r\n  const statuses = ['active', 'inactive', 'pending'];\r\n  const vehicleTypes = ['car', 'suv', 'cargo', 'truck'];\r\n  return Array.from({ length: count }, (_, i) => ({\r\n    id: `driver-${i + 1}`,\r\n    name: `Driver ${i + 1}`,\r\n    email: `driver${i + 1}@example.com`,\r\n    phone: `(555) ${200 + i}-${2000 + i}`,\r\n    vehicleType: vehicleTypes[Math.floor(Math.random() * vehicleTypes.length)],\r\n    licenseNumber: `DL${10000 + i}`,\r\n    status: statuses[Math.floor(Math.random() * statuses.length)],\r\n    address: `${2000 + i} Oak St, City ${i + 1}, State`,\r\n    notes: `Notes about driver ${i + 1}`,\r\n    createdAt: new Date(Date.now() - Math.random() * 10000000000).toISOString(),\r\n    updatedAt: new Date(Date.now() - Math.random() * 1000000000).toISOString()\r\n  }));\r\n};\r\n\r\nconst generateMockDeliveries = (count = 10) => {\r\n  const statuses = ['pending', 'in-transit', 'delivered', 'canceled'];\r\n  const priorities = ['standard', 'express', 'rush'];\r\n  return Array.from({ length: count }, (_, i) => ({\r\n    id: `delivery-${i + 1}`,\r\n    trackingNumber: `ARETI-${100000 + i}`,\r\n    description: `Delivery ${i + 1}`,\r\n    status: statuses[Math.floor(Math.random() * statuses.length)],\r\n    priority: priorities[Math.floor(Math.random() * priorities.length)],\r\n    pickupAddress: `${3000 + i} Pickup St, City ${i % 5 + 1}, State`,\r\n    deliveryAddress: `${4000 + i} Delivery St, City ${(i + 3) % 5 + 1}, State`,\r\n    scheduledDate: new Date(Date.now() + (Math.random() * 10 - 5) * 86400000).toISOString(),\r\n    organizationId: Math.random() > 0.3 ? `org-${Math.floor(Math.random() * count) + 1}` : null,\r\n    driverId: Math.random() > 0.3 ? `driver-${Math.floor(Math.random() * count) + 1}` : null,\r\n    notes: `Notes about delivery ${i + 1}`,\r\n    createdAt: new Date(Date.now() - Math.random() * 10000000000).toISOString(),\r\n    updatedAt: new Date(Date.now() - Math.random() * 1000000000).toISOString()\r\n  }));\r\n};\r\n\r\nconst generateMockQuotes = (count = 10) => {\r\n  const statuses = ['pending', 'approved', 'rejected', 'expired'];\r\n  const speeds = ['standard', 'same-day', 'express', 'rush'];\r\n  return Array.from({ length: count }, (_, i) => ({\r\n    id: `quote-${i + 1}`,\r\n    quoteNumber: `QT-${200000 + i}`,\r\n    customerName: `Customer ${i + 1}`,\r\n    customerEmail: `customer${i + 1}@example.com`,\r\n    customerPhone: `(555) ${300 + i}-${3000 + i}`,\r\n    company: Math.random() > 0.3 ? `Company ${i % 5 + 1}` : '',\r\n    status: statuses[Math.floor(Math.random() * statuses.length)],\r\n    totalAmount: Math.floor(5000 + Math.random() * 15000) / 100,\r\n    validUntil: new Date(Date.now() + (Math.random() * 30) * 86400000).toISOString(),\r\n    pickupZip: `${10000 + i % 10}`,\r\n    deliveryZip: `${20000 + i % 10}`,\r\n    packageDetails: `${1 + Math.floor(Math.random() * 3)} packages, ${5 + Math.floor(Math.random() * 45)}lbs total`,\r\n    deliverySpeed: speeds[Math.floor(Math.random() * speeds.length)],\r\n    contactId: Math.random() > 0.3 ? `contact-${Math.floor(Math.random() * count) + 1}` : null,\r\n    notes: `Quote notes ${i + 1}`,\r\n    createdAt: new Date(Date.now() - Math.random() * 10000000000).toISOString(),\r\n    updatedAt: new Date(Date.now() - Math.random() * 1000000000).toISOString()\r\n  }));\r\n};\r\n\r\nconst generateMockRoutes = (count = 10) => {\r\n  const statuses = ['active', 'inactive'];\r\n  const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n  return Array.from({ length: count }, (_, i) => ({\r\n    id: `route-${i + 1}`,\r\n    name: `Route ${i + 1}`,\r\n    startLocation: `${5000 + i} Start St, City ${i % 5 + 1}, State`,\r\n    endLocation: `${6000 + i} End St, City ${(i + 2) % 5 + 1}, State`,\r\n    distance: Math.floor(10 + Math.random() * 100),\r\n    estimatedTime: Math.floor(15 + Math.random() * 120),\r\n    status: statuses[Math.floor(Math.random() * statuses.length)],\r\n    averageDeliveries: Math.floor(5 + Math.random() * 20),\r\n    deliveryDays: Array.from(\r\n      { length: 1 + Math.floor(Math.random() * 5) },\r\n      () => days[Math.floor(Math.random() * days.length)]\r\n    ).filter((day, index, self) => self.indexOf(day) === index), // Remove duplicates\r\n    notes: `Route notes ${i + 1}`,\r\n    createdAt: new Date(Date.now() - Math.random() * 10000000000).toISOString(),\r\n    updatedAt: new Date(Date.now() - Math.random() * 1000000000).toISOString()\r\n  }));\r\n};\r\n\r\nconst generateMockRevenueData = (timeframe = 'month') => {\r\n  // Generate monthly revenue data\r\n  const monthlyData = Array.from({ length: 12 }, (_, i) => ({\r\n    name: new Date(2024, i, 1).toLocaleString('default', { month: 'short' }),\r\n    amount: Math.floor(10000 + Math.random() * 50000)\r\n  }));\r\n  \r\n  // Generate quarterly revenue data\r\n  const quarterlyData = Array.from({ length: 4 }, (_, i) => ({\r\n    name: `Q${i + 1} 2024`,\r\n    amount: Math.floor(50000 + Math.random() * 100000)\r\n  }));\r\n  \r\n  // Generate yearly revenue data\r\n  const yearlyData = Array.from({ length: 5 }, (_, i) => ({\r\n    name: `${2020 + i}`,\r\n    amount: Math.floor(200000 + Math.random() * 500000)\r\n  }));\r\n  \r\n  // Generate revenue by service type\r\n  const byServiceData = [\r\n    { name: 'Standard Delivery', amount: Math.floor(50000 + Math.random() * 100000) },\r\n    { name: 'Same-Day Delivery', amount: Math.floor(40000 + Math.random() * 80000) },\r\n    { name: 'Express Delivery', amount: Math.floor(30000 + Math.random() * 60000) },\r\n    { name: 'Rush Delivery', amount: Math.floor(20000 + Math.random() * 40000) },\r\n    { name: 'Custom Logistics', amount: Math.floor(10000 + Math.random() * 30000) }\r\n  ];\r\n  \r\n  // Generate top customers\r\n  const topCustomers = Array.from({ length: 5 }, (_, i) => ({\r\n    name: `Customer ${i + 1}`,\r\n    company: `Company ${i + 1}`,\r\n    totalRevenue: Math.floor(10000 + Math.random() * 50000),\r\n    orderCount: Math.floor(10 + Math.random() * 90),\r\n    averageOrderValue: Math.floor(500 + Math.random() * 1500)\r\n  }));\r\n  \r\n  // Calculate total revenue for current year and month\r\n  const totalYear = yearlyData[yearlyData.length - 1].amount;\r\n  const totalMonth = monthlyData[new Date().getMonth()].amount;\r\n  \r\n  // Generate comparison percentages\r\n  const comparisonToLastMonth = -10 + Math.random() * 30; // -10% to +20%\r\n  const comparisonToLastYear = -5 + Math.random() * 25; // -5% to +20%\r\n  \r\n  return {\r\n    monthly: monthlyData,\r\n    quarterly: quarterlyData,\r\n    yearly: yearlyData,\r\n    byService: byServiceData,\r\n    topCustomers: topCustomers,\r\n    totalYear,\r\n    totalMonth,\r\n    comparisonToLastMonth,\r\n    comparisonToLastYear,\r\n    averageOrderValue: Math.floor(500 + Math.random() * 500),\r\n    highestRevenueRoute: {\r\n      name: `Route ${Math.floor(Math.random() * 10) + 1}`,\r\n      amount: Math.floor(10000 + Math.random() * 20000)\r\n    }\r\n  };\r\n};\r\n\r\nconst generateMockPerformanceData = (timeframe = 'week') => {\r\n  // Generate delivery performance data\r\n  let performanceDates = [];\r\n  let numPoints = 0;\r\n  \r\n  if (timeframe === 'week') {\r\n    // Last 7 days\r\n    numPoints = 7;\r\n    const today = new Date();\r\n    for (let i = 6; i >= 0; i--) {\r\n      const date = new Date(today);\r\n      date.setDate(today.getDate() - i);\r\n      performanceDates.push(date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }));\r\n    }\r\n  } else if (timeframe === 'month') {\r\n    // Last 30 days, weekly data points\r\n    numPoints = 4;\r\n    const today = new Date();\r\n    for (let i = 3; i >= 0; i--) {\r\n      const date = new Date(today);\r\n      date.setDate(today.getDate() - (i * 7));\r\n      performanceDates.push(date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }));\r\n    }\r\n  } else {\r\n    // Quarterly, last 3 months\r\n    numPoints = 3;\r\n    const today = new Date();\r\n    for (let i = 2; i >= 0; i--) {\r\n      const date = new Date(today);\r\n      date.setMonth(today.getMonth() - i);\r\n      performanceDates.push(date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' }));\r\n    }\r\n  }\r\n  \r\n  // Generate delivery performance data\r\n  const deliveryPerformance = performanceDates.map(date => ({\r\n    date,\r\n    deliveries: Math.floor(20 + Math.random() * 80),\r\n    onTimePercentage: Math.floor(75 + Math.random() * 20)\r\n  }));\r\n  \r\n  // Generate driver performance data\r\n  const driverPerformance = Array.from({ length: 5 }, (_, i) => ({\r\n    name: `Driver ${i + 1}`,\r\n    onTimePercentage: Math.floor(75 + Math.random() * 25)\r\n  }));\r\n  \r\n  // Generate customer satisfaction data\r\n  const customerSatisfaction = performanceDates.map(date => ({\r\n    date,\r\n    score: 3.5 + Math.random() * 1.5\r\n  }));\r\n  \r\n  // Generate delivery status distribution\r\n  const onTime = Math.floor(70 + Math.random() * 20);\r\n  const delayed = Math.floor(10 + Math.random() * 15);\r\n  const veryDelayed = 100 - onTime - delayed;\r\n  \r\n  // Generate performance insights\r\n  const insightTypes = ['positive', 'warning', 'negative'];\r\n  const insights = Array.from({ length: Math.floor(1 + Math.random() * 3) }, (_, i) => {\r\n    const type = insightTypes[Math.floor(Math.random() * 3)];\r\n    return {\r\n      type,\r\n      title: type === 'positive' \r\n        ? 'Performance Improvement' \r\n        : type === 'warning' \r\n          ? 'Potential Issue Detected' \r\n          : 'Performance Concern',\r\n      description: type === 'positive'\r\n        ? `On-time delivery rates have improved by ${Math.floor(2 + Math.random() * 8)}% over the last period.`\r\n        : type === 'warning'\r\n          ? `Delivery times for Route ${Math.floor(Math.random() * 10) + 1} are trending 10-15% longer than average.`\r\n          : `Customer satisfaction scores for rush deliveries have decreased by ${Math.floor(2 + Math.random() * 8)}% this period.`\r\n    };\r\n  });\r\n  \r\n  return {\r\n    deliveryPerformance,\r\n    driverPerformance,\r\n    customerSatisfaction,\r\n    deliveryStatus: {\r\n      onTime,\r\n      delayed,\r\n      veryDelayed\r\n    },\r\n    avgDeliveryTime: Math.floor(30 + Math.random() * 40),\r\n    completionRate: (75 + Math.random() * 20) / 100,\r\n    avgSatisfactionScore: 3.8 + Math.random() * 0.9,\r\n    insights\r\n  };\r\n};\r\n\r\n// API Service methods\r\nconst ApiService = {\r\n  // Contacts\r\n  async getContacts() {\r\n    try {\r\n      const response = await apiClient.get('/contacts');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching contacts:', error);\r\n      // For development, return mock data\r\n      return generateMockContacts();\r\n    }\r\n  },\r\n  \r\n  async getContact(id) {\r\n    try {\r\n      const response = await apiClient.get(`/contacts/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching contact ${id}:`, error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async createContact(data) {\r\n    try {\r\n      const response = await apiClient.post('/contacts', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating contact:', error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async updateContact(id, data) {\r\n    try {\r\n      const response = await apiClient.put(`/contacts/${id}`, data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error updating contact ${id}:`, error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async deleteContact(id) {\r\n    try {\r\n      await apiClient.delete(`/contacts/${id}`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Error deleting contact ${id}:`, error);\r\n      return false;\r\n    }\r\n  },\r\n  \r\n  // Organizations\r\n  async getOrganizations() {\r\n    try {\r\n      const response = await apiClient.get('/organizations');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching organizations:', error);\r\n      // For development, return mock data\r\n      return generateMockOrganizations();\r\n    }\r\n  },\r\n  \r\n  async getOrganization(id) {\r\n    try {\r\n      const response = await apiClient.get(`/organizations/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching organization ${id}:`, error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async createOrganization(data) {\r\n    try {\r\n      const response = await apiClient.post('/organizations', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating organization:', error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async updateOrganization(id, data) {\r\n    try {\r\n      const response = await apiClient.put(`/organizations/${id}`, data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error updating organization ${id}:`, error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async deleteOrganization(id) {\r\n    try {\r\n      await apiClient.delete(`/organizations/${id}`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Error deleting organization ${id}:`, error);\r\n      return false;\r\n    }\r\n  },\r\n  \r\n  // Tasks\r\n  async getTasks() {\r\n    try {\r\n      const response = await apiClient.get('/tasks');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching tasks:', error);\r\n      // For development, return mock data\r\n      return generateMockTasks();\r\n    }\r\n  },\r\n  \r\n  async getTask(id) {\r\n    try {\r\n      const response = await apiClient.get(`/tasks/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching task ${id}:`, error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async createTask(data) {\r\n    try {\r\n      const response = await apiClient.post('/tasks', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating task:', error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async updateTask(id, data) {\r\n    try {\r\n      const response = await apiClient.put(`/tasks/${id}`, data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error updating task ${id}:`, error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async deleteTask(id) {\r\n    try {\r\n      await apiClient.delete(`/tasks/${id}`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Error deleting task ${id}:`, error);\r\n      return false;\r\n    }\r\n  },\r\n  \r\n  // Drivers\r\n  async getDrivers() {\r\n    try {\r\n      const response = await apiClient.get('/drivers');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching drivers:', error);\r\n      // For development, return mock data\r\n      return generateMockDrivers();\r\n    }\r\n  },\r\n  \r\n  async getDriver(id) {\r\n    try {\r\n      const response = await apiClient.get(`/drivers/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching driver ${id}:`, error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async createDriver(data) {\r\n    try {\r\n      const response = await apiClient.post('/drivers', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating driver:', error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async updateDriver(id, data) {\r\n    try {\r\n      const response = await apiClient.put(`/drivers/${id}`, data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error updating driver ${id}:`, error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async deleteDriver(id) {\r\n    try {\r\n      await apiClient.delete(`/drivers/${id}`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Error deleting driver ${id}:`, error);\r\n      return false;\r\n    }\r\n  },\r\n  \r\n  // Deliveries\r\n  async getDeliveries() {\r\n    try {\r\n      const response = await apiClient.get('/deliveries');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching deliveries:', error);\r\n      // For development, return mock data\r\n      return generateMockDeliveries();\r\n    }\r\n  },\r\n  \r\n  async getDelivery(id) {\r\n    try {\r\n      const response = await apiClient.get(`/deliveries/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching delivery ${id}:`, error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async createDelivery(data) {\r\n    try {\r\n      const response = await apiClient.post('/deliveries', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating delivery:', error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async updateDelivery(id, data) {\r\n    try {\r\n      const response = await apiClient.put(`/deliveries/${id}`, data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error updating delivery ${id}:`, error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async deleteDelivery(id) {\r\n    try {\r\n      await apiClient.delete(`/deliveries/${id}`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Error deleting delivery ${id}:`, error);\r\n      return false;\r\n    }\r\n  },\r\n  \r\n  // Quotes\r\n  async getQuotes() {\r\n    try {\r\n      const response = await apiClient.get('/quotes');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching quotes:', error);\r\n      // For development, return mock data\r\n      return generateMockQuotes();\r\n    }\r\n  },\r\n  \r\n  async getQuote(id) {\r\n    try {\r\n      const response = await apiClient.get(`/quotes/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching quote ${id}:`, error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async createQuote(data) {\r\n    try {\r\n      const response = await apiClient.post('/quotes', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating quote:', error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async updateQuote(id, data) {\r\n    try {\r\n      const response = await apiClient.put(`/quotes/${id}`, data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error updating quote ${id}:`, error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async deleteQuote(id) {\r\n    try {\r\n      await apiClient.delete(`/quotes/${id}`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Error deleting quote ${id}:`, error);\r\n      return false;\r\n    }\r\n  },\r\n  \r\n  async createDeliveryFromQuote(quoteId) {\r\n    try {\r\n      const response = await apiClient.post(`/quotes/${quoteId}/convert-to-delivery`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error converting quote ${quoteId} to delivery:`, error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  // Routes\r\n  async getRoutes() {\r\n    try {\r\n      const response = await apiClient.get('/routes');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching routes:', error);\r\n      // For development, return mock data\r\n      return generateMockRoutes();\r\n    }\r\n  },\r\n  \r\n  async getRoute(id) {\r\n    try {\r\n      const response = await apiClient.get(`/routes/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching route ${id}:`, error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async createRoute(data) {\r\n    try {\r\n      const response = await apiClient.post('/routes', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating route:', error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async updateRoute(id, data) {\r\n    try {\r\n      const response = await apiClient.put(`/routes/${id}`, data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error updating route ${id}:`, error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async deleteRoute(id) {\r\n    try {\r\n      await apiClient.delete(`/routes/${id}`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Error deleting route ${id}:`, error);\r\n      return false;\r\n    }\r\n  },\r\n  \r\n  // Revenue Data\r\n  async getRevenueData(dateRange = 'month') {\r\n    try {\r\n      const response = await apiClient.get(`/analytics/revenue?range=${dateRange}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching revenue data:`, error);\r\n      // For development, return mock data\r\n      return generateMockRevenueData(dateRange);\r\n    }\r\n  },\r\n  \r\n  // Performance Data\r\n  async getPerformanceData(timeFrame = 'week') {\r\n    try {\r\n      const response = await apiClient.get(`/analytics/performance?timeFrame=${timeFrame}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching performance data:`, error);\r\n      // For development, return mock data\r\n      return generateMockPerformanceData(timeFrame);\r\n    }\r\n  },\r\n  \r\n  // Dashboard Data\r\n  async getDashboardData() {\r\n    try {\r\n      const response = await apiClient.get('/analytics/dashboard');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching dashboard data:', error);\r\n      // For development, create mock dashboard data\r\n      return {\r\n        stats: {\r\n          totalContacts: 100 + Math.floor(Math.random() * 50),\r\n          totalOrganizations: 50 + Math.floor(Math.random() * 30),\r\n          activeDrivers: 20 + Math.floor(Math.random() * 15),\r\n          pendingDeliveries: 30 + Math.floor(Math.random() * 20),\r\n          totalRevenue: 50000 + Math.floor(Math.random() * 50000),\r\n          onTimeDeliveryRate: 85 + Math.floor(Math.random() * 10)\r\n        },\r\n        recentActivity: Array.from({ length: 5 }, (_, i) => ({\r\n          id: `activity-${i + 1}`,\r\n          type: ['delivery', 'quote', 'contact', 'driver'][Math.floor(Math.random() * 4)],\r\n          description: `Recent activity ${i + 1}`,\r\n          timestamp: new Date(Date.now() - Math.random() * 86400000 * 5).toISOString()\r\n        }))\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nexport default ApiService;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,WAAW,KAAM,QAAQ,CAEhC,KAAM,CAAAC,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,+BAA+B,CAEhF;AACA,KAAM,CAAAC,SAAS,CAAGN,KAAK,CAACO,MAAM,CAAC,CAC7BC,OAAO,CAAEN,OAAO,CAChBO,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,EAAK,CACV;AACA,KAAM,CAAAC,UAAU,CAAGb,WAAW,CAACc,aAAa,CAAC,CAAC,CAC9C,GAAID,UAAU,EAAIA,UAAU,CAACE,aAAa,CAAE,CAC1CH,MAAM,CAACJ,OAAO,CAACO,aAAa,CAAGF,UAAU,CAACE,aAAa,CACzD,CACA,MAAO,CAAAH,MAAM,CACf,CAAC,CACAI,KAAK,EAAK,CACT,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAED;AACAX,SAAS,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CAChCQ,QAAQ,EAAKA,QAAQ,CACrBH,KAAK,EAAK,CACT;AACA,GAAIA,KAAK,CAACG,QAAQ,EAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,GAAK,GAAG,CAAE,CACnD;AACApB,WAAW,CAACqB,MAAM,CAAC,CAAC,CACpBC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAC1B,CACA,MAAO,CAAAP,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAED;AACA,KAAM,CAAAS,oBAAoB,CAAG,QAAAA,CAAA,CAAgB,IAAf,CAAAC,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CACtC,KAAM,CAAAG,QAAQ,CAAG,CAAC,MAAM,CAAE,aAAa,CAAE,UAAU,CAAE,SAAS,CAAC,CAC/D,MAAO,CAAAC,KAAK,CAACC,IAAI,CAAC,CAAEJ,MAAM,CAAEF,KAAM,CAAC,CAAE,CAACO,CAAC,CAAEC,CAAC,IAAM,CAC9CC,EAAE,CAAE,WAAWD,CAAC,CAAG,CAAC,EAAE,CACtBE,IAAI,CAAE,WAAWF,CAAC,CAAG,CAAC,EAAE,CACxBG,KAAK,CAAE,UAAUH,CAAC,CAAG,CAAC,cAAc,CACpCI,KAAK,CAAE,SAAS,GAAG,CAAGJ,CAAC,IAAI,IAAI,CAAGA,CAAC,EAAE,CACrCK,OAAO,CAAE,WAAWL,CAAC,CAAG,CAAC,EAAE,CAC3Bd,MAAM,CAAEU,QAAQ,CAACU,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGZ,QAAQ,CAACF,MAAM,CAAC,CAAC,CAC7De,KAAK,CAAE,uBAAuBT,CAAC,CAAG,CAAC,EAAE,CACrCU,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGN,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,WAAW,CAAC,CAACK,WAAW,CAAC,CAAC,CAC3EC,SAAS,CAAE,GAAI,CAAAH,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGN,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,UAAU,CAAC,CAACK,WAAW,CAAC,CAC3E,CAAC,CAAC,CAAC,CACL,CAAC,CAED,KAAM,CAAAE,yBAAyB,CAAG,QAAAA,CAAA,CAAgB,IAAf,CAAAvB,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAC3C,KAAM,CAAAuB,KAAK,CAAG,CAAC,OAAO,CAAE,QAAQ,CAAE,OAAO,CAAC,CAC1C,MAAO,CAAAnB,KAAK,CAACC,IAAI,CAAC,CAAEJ,MAAM,CAAEF,KAAM,CAAC,CAAE,CAACO,CAAC,CAAEC,CAAC,IAAM,CAC9CC,EAAE,CAAE,OAAOD,CAAC,CAAG,CAAC,EAAE,CAClBE,IAAI,CAAE,gBAAgBF,CAAC,CAAG,CAAC,EAAE,CAC7BiB,QAAQ,CAAE,YAAYjB,CAAC,CAAG,CAAC,CAAG,CAAC,EAAE,CACjCkB,OAAO,CAAE,cAAclB,CAAC,CAAG,CAAC,cAAc,CAC1CmB,IAAI,CAAEH,KAAK,CAACV,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGQ,KAAK,CAACtB,MAAM,CAAC,CAAC,CACrD0B,OAAO,CAAE,GAAG,IAAI,CAAGpB,CAAC,kBAAkBA,CAAC,CAAG,CAAC,SAAS,CACpDS,KAAK,CAAE,4BAA4BT,CAAC,CAAG,CAAC,EAAE,CAC1CU,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGN,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,WAAW,CAAC,CAACK,WAAW,CAAC,CAAC,CAC3EC,SAAS,CAAE,GAAI,CAAAH,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGN,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,UAAU,CAAC,CAACK,WAAW,CAAC,CAC3E,CAAC,CAAC,CAAC,CACL,CAAC,CAED,KAAM,CAAAQ,iBAAiB,CAAG,QAAAA,CAAA,CAAgB,IAAf,CAAA7B,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CACnC,KAAM,CAAAG,QAAQ,CAAG,CAAC,SAAS,CAAE,aAAa,CAAE,WAAW,CAAC,CACxD,KAAM,CAAA0B,UAAU,CAAG,CAAC,KAAK,CAAE,QAAQ,CAAE,MAAM,CAAC,CAC5C,MAAO,CAAAzB,KAAK,CAACC,IAAI,CAAC,CAAEJ,MAAM,CAAEF,KAAM,CAAC,CAAE,CAACO,CAAC,CAAEC,CAAC,IAAM,CAC9CC,EAAE,CAAE,QAAQD,CAAC,CAAG,CAAC,EAAE,CACnBuB,KAAK,CAAE,QAAQvB,CAAC,CAAG,CAAC,EAAE,CACtBwB,WAAW,CAAE,wBAAwBxB,CAAC,CAAG,CAAC,EAAE,CAC5CyB,OAAO,CAAE,GAAI,CAAAd,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,CAACN,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAG,EAAE,EAAI,QAAQ,CAAC,CAACK,WAAW,CAAC,CAAC,CAClFa,QAAQ,CAAEJ,UAAU,CAAChB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGc,UAAU,CAAC5B,MAAM,CAAC,CAAC,CACnER,MAAM,CAAEU,QAAQ,CAACU,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGZ,QAAQ,CAACF,MAAM,CAAC,CAAC,CAC7DiC,SAAS,CAAErB,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,GAAG,CAAG,WAAWF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGhB,KAAK,CAAC,CAAG,CAAC,EAAE,CAAG,IAAI,CAC1FkB,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGN,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,WAAW,CAAC,CAACK,WAAW,CAAC,CAAC,CAC3EC,SAAS,CAAE,GAAI,CAAAH,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGN,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,UAAU,CAAC,CAACK,WAAW,CAAC,CAC3E,CAAC,CAAC,CAAC,CACL,CAAC,CAED,KAAM,CAAAe,mBAAmB,CAAG,QAAAA,CAAA,CAAgB,IAAf,CAAApC,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CACrC,KAAM,CAAAG,QAAQ,CAAG,CAAC,QAAQ,CAAE,UAAU,CAAE,SAAS,CAAC,CAClD,KAAM,CAAAiC,YAAY,CAAG,CAAC,KAAK,CAAE,KAAK,CAAE,OAAO,CAAE,OAAO,CAAC,CACrD,MAAO,CAAAhC,KAAK,CAACC,IAAI,CAAC,CAAEJ,MAAM,CAAEF,KAAM,CAAC,CAAE,CAACO,CAAC,CAAEC,CAAC,IAAM,CAC9CC,EAAE,CAAE,UAAUD,CAAC,CAAG,CAAC,EAAE,CACrBE,IAAI,CAAE,UAAUF,CAAC,CAAG,CAAC,EAAE,CACvBG,KAAK,CAAE,SAASH,CAAC,CAAG,CAAC,cAAc,CACnCI,KAAK,CAAE,SAAS,GAAG,CAAGJ,CAAC,IAAI,IAAI,CAAGA,CAAC,EAAE,CACrC8B,WAAW,CAAED,YAAY,CAACvB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGqB,YAAY,CAACnC,MAAM,CAAC,CAAC,CAC1EqC,aAAa,CAAE,KAAK,KAAK,CAAG/B,CAAC,EAAE,CAC/Bd,MAAM,CAAEU,QAAQ,CAACU,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGZ,QAAQ,CAACF,MAAM,CAAC,CAAC,CAC7D0B,OAAO,CAAE,GAAG,IAAI,CAAGpB,CAAC,iBAAiBA,CAAC,CAAG,CAAC,SAAS,CACnDS,KAAK,CAAE,sBAAsBT,CAAC,CAAG,CAAC,EAAE,CACpCU,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGN,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,WAAW,CAAC,CAACK,WAAW,CAAC,CAAC,CAC3EC,SAAS,CAAE,GAAI,CAAAH,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGN,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,UAAU,CAAC,CAACK,WAAW,CAAC,CAC3E,CAAC,CAAC,CAAC,CACL,CAAC,CAED,KAAM,CAAAmB,sBAAsB,CAAG,QAAAA,CAAA,CAAgB,IAAf,CAAAxC,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CACxC,KAAM,CAAAG,QAAQ,CAAG,CAAC,SAAS,CAAE,YAAY,CAAE,WAAW,CAAE,UAAU,CAAC,CACnE,KAAM,CAAA0B,UAAU,CAAG,CAAC,UAAU,CAAE,SAAS,CAAE,MAAM,CAAC,CAClD,MAAO,CAAAzB,KAAK,CAACC,IAAI,CAAC,CAAEJ,MAAM,CAAEF,KAAM,CAAC,CAAE,CAACO,CAAC,CAAEC,CAAC,IAAM,CAC9CC,EAAE,CAAE,YAAYD,CAAC,CAAG,CAAC,EAAE,CACvBiC,cAAc,CAAE,SAAS,MAAM,CAAGjC,CAAC,EAAE,CACrCwB,WAAW,CAAE,YAAYxB,CAAC,CAAG,CAAC,EAAE,CAChCd,MAAM,CAAEU,QAAQ,CAACU,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGZ,QAAQ,CAACF,MAAM,CAAC,CAAC,CAC7DgC,QAAQ,CAAEJ,UAAU,CAAChB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGc,UAAU,CAAC5B,MAAM,CAAC,CAAC,CACnEwC,aAAa,CAAE,GAAG,IAAI,CAAGlC,CAAC,oBAAoBA,CAAC,CAAG,CAAC,CAAG,CAAC,SAAS,CAChEmC,eAAe,CAAE,GAAG,IAAI,CAAGnC,CAAC,sBAAsB,CAACA,CAAC,CAAG,CAAC,EAAI,CAAC,CAAG,CAAC,SAAS,CAC1EoC,aAAa,CAAE,GAAI,CAAAzB,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,CAACN,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAG,CAAC,EAAI,QAAQ,CAAC,CAACK,WAAW,CAAC,CAAC,CACvFwB,cAAc,CAAE/B,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,GAAG,CAAG,OAAOF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGhB,KAAK,CAAC,CAAG,CAAC,EAAE,CAAG,IAAI,CAC3F8C,QAAQ,CAAEhC,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,GAAG,CAAG,UAAUF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGhB,KAAK,CAAC,CAAG,CAAC,EAAE,CAAG,IAAI,CACxFiB,KAAK,CAAE,wBAAwBT,CAAC,CAAG,CAAC,EAAE,CACtCU,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGN,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,WAAW,CAAC,CAACK,WAAW,CAAC,CAAC,CAC3EC,SAAS,CAAE,GAAI,CAAAH,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGN,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,UAAU,CAAC,CAACK,WAAW,CAAC,CAC3E,CAAC,CAAC,CAAC,CACL,CAAC,CAED,KAAM,CAAA0B,kBAAkB,CAAG,QAAAA,CAAA,CAAgB,IAAf,CAAA/C,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CACpC,KAAM,CAAAG,QAAQ,CAAG,CAAC,SAAS,CAAE,UAAU,CAAE,UAAU,CAAE,SAAS,CAAC,CAC/D,KAAM,CAAA4C,MAAM,CAAG,CAAC,UAAU,CAAE,UAAU,CAAE,SAAS,CAAE,MAAM,CAAC,CAC1D,MAAO,CAAA3C,KAAK,CAACC,IAAI,CAAC,CAAEJ,MAAM,CAAEF,KAAM,CAAC,CAAE,CAACO,CAAC,CAAEC,CAAC,IAAM,CAC9CC,EAAE,CAAE,SAASD,CAAC,CAAG,CAAC,EAAE,CACpByC,WAAW,CAAE,MAAM,MAAM,CAAGzC,CAAC,EAAE,CAC/B0C,YAAY,CAAE,YAAY1C,CAAC,CAAG,CAAC,EAAE,CACjC2C,aAAa,CAAE,WAAW3C,CAAC,CAAG,CAAC,cAAc,CAC7C4C,aAAa,CAAE,SAAS,GAAG,CAAG5C,CAAC,IAAI,IAAI,CAAGA,CAAC,EAAE,CAC7CK,OAAO,CAAEC,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,GAAG,CAAG,WAAWR,CAAC,CAAG,CAAC,CAAG,CAAC,EAAE,CAAG,EAAE,CAC1Dd,MAAM,CAAEU,QAAQ,CAACU,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGZ,QAAQ,CAACF,MAAM,CAAC,CAAC,CAC7DmD,WAAW,CAAEvC,IAAI,CAACC,KAAK,CAAC,IAAI,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,KAAK,CAAC,CAAG,GAAG,CAC3DsC,UAAU,CAAE,GAAI,CAAAnC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAIN,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAI,QAAQ,CAAC,CAACK,WAAW,CAAC,CAAC,CAChFkC,SAAS,CAAE,GAAG,KAAK,CAAG/C,CAAC,CAAG,EAAE,EAAE,CAC9BgD,WAAW,CAAE,GAAG,KAAK,CAAGhD,CAAC,CAAG,EAAE,EAAE,CAChCiD,cAAc,CAAE,GAAG,CAAC,CAAG3C,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,CAAC,CAAC,cAAc,CAAC,CAAGF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,WAAW,CAC/G0C,aAAa,CAAEV,MAAM,CAAClC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGgC,MAAM,CAAC9C,MAAM,CAAC,CAAC,CAChEiC,SAAS,CAAErB,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,GAAG,CAAG,WAAWF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGhB,KAAK,CAAC,CAAG,CAAC,EAAE,CAAG,IAAI,CAC1FiB,KAAK,CAAE,eAAeT,CAAC,CAAG,CAAC,EAAE,CAC7BU,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGN,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,WAAW,CAAC,CAACK,WAAW,CAAC,CAAC,CAC3EC,SAAS,CAAE,GAAI,CAAAH,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGN,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,UAAU,CAAC,CAACK,WAAW,CAAC,CAC3E,CAAC,CAAC,CAAC,CACL,CAAC,CAED,KAAM,CAAAsC,kBAAkB,CAAG,QAAAA,CAAA,CAAgB,IAAf,CAAA3D,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CACpC,KAAM,CAAAG,QAAQ,CAAG,CAAC,QAAQ,CAAE,UAAU,CAAC,CACvC,KAAM,CAAAwD,IAAI,CAAG,CAAC,QAAQ,CAAE,SAAS,CAAE,WAAW,CAAE,UAAU,CAAE,QAAQ,CAAE,UAAU,CAAE,QAAQ,CAAC,CAC3F,MAAO,CAAAvD,KAAK,CAACC,IAAI,CAAC,CAAEJ,MAAM,CAAEF,KAAM,CAAC,CAAE,CAACO,CAAC,CAAEC,CAAC,IAAM,CAC9CC,EAAE,CAAE,SAASD,CAAC,CAAG,CAAC,EAAE,CACpBE,IAAI,CAAE,SAASF,CAAC,CAAG,CAAC,EAAE,CACtBqD,aAAa,CAAE,GAAG,IAAI,CAAGrD,CAAC,mBAAmBA,CAAC,CAAG,CAAC,CAAG,CAAC,SAAS,CAC/DsD,WAAW,CAAE,GAAG,IAAI,CAAGtD,CAAC,iBAAiB,CAACA,CAAC,CAAG,CAAC,EAAI,CAAC,CAAG,CAAC,SAAS,CACjEuD,QAAQ,CAAEjD,IAAI,CAACC,KAAK,CAAC,EAAE,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,GAAG,CAAC,CAC9CgD,aAAa,CAAElD,IAAI,CAACC,KAAK,CAAC,EAAE,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,GAAG,CAAC,CACnDtB,MAAM,CAAEU,QAAQ,CAACU,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGZ,QAAQ,CAACF,MAAM,CAAC,CAAC,CAC7D+D,iBAAiB,CAAEnD,IAAI,CAACC,KAAK,CAAC,CAAC,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CACrDkD,YAAY,CAAE7D,KAAK,CAACC,IAAI,CACtB,CAAEJ,MAAM,CAAE,CAAC,CAAGY,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,CAAC,CAAE,CAAC,CAC7C,IAAM4C,IAAI,CAAC9C,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG4C,IAAI,CAAC1D,MAAM,CAAC,CACpD,CAAC,CAACiE,MAAM,CAAC,CAACC,GAAG,CAAEC,KAAK,CAAEC,IAAI,GAAKA,IAAI,CAACC,OAAO,CAACH,GAAG,CAAC,GAAKC,KAAK,CAAC,CAAE;AAC7DpD,KAAK,CAAE,eAAeT,CAAC,CAAG,CAAC,EAAE,CAC7BU,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGN,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,WAAW,CAAC,CAACK,WAAW,CAAC,CAAC,CAC3EC,SAAS,CAAE,GAAI,CAAAH,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGN,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,UAAU,CAAC,CAACK,WAAW,CAAC,CAC3E,CAAC,CAAC,CAAC,CACL,CAAC,CAED,KAAM,CAAAmD,uBAAuB,CAAG,QAAAA,CAAA,CAAyB,IAAxB,CAAAC,SAAS,CAAAxE,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,OAAO,CAClD;AACA,KAAM,CAAAyE,WAAW,CAAGrE,KAAK,CAACC,IAAI,CAAC,CAAEJ,MAAM,CAAE,EAAG,CAAC,CAAE,CAACK,CAAC,CAAEC,CAAC,IAAM,CACxDE,IAAI,CAAE,GAAI,CAAAS,IAAI,CAAC,IAAI,CAAEX,CAAC,CAAE,CAAC,CAAC,CAACmE,cAAc,CAAC,SAAS,CAAE,CAAEC,KAAK,CAAE,OAAQ,CAAC,CAAC,CACxEC,MAAM,CAAE/D,IAAI,CAACC,KAAK,CAAC,KAAK,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,KAAK,CAClD,CAAC,CAAC,CAAC,CAEH;AACA,KAAM,CAAA8D,aAAa,CAAGzE,KAAK,CAACC,IAAI,CAAC,CAAEJ,MAAM,CAAE,CAAE,CAAC,CAAE,CAACK,CAAC,CAAEC,CAAC,IAAM,CACzDE,IAAI,CAAE,IAAIF,CAAC,CAAG,CAAC,OAAO,CACtBqE,MAAM,CAAE/D,IAAI,CAACC,KAAK,CAAC,KAAK,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,MAAM,CACnD,CAAC,CAAC,CAAC,CAEH;AACA,KAAM,CAAA+D,UAAU,CAAG1E,KAAK,CAACC,IAAI,CAAC,CAAEJ,MAAM,CAAE,CAAE,CAAC,CAAE,CAACK,CAAC,CAAEC,CAAC,IAAM,CACtDE,IAAI,CAAE,GAAG,IAAI,CAAGF,CAAC,EAAE,CACnBqE,MAAM,CAAE/D,IAAI,CAACC,KAAK,CAAC,MAAM,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,MAAM,CACpD,CAAC,CAAC,CAAC,CAEH;AACA,KAAM,CAAAgE,aAAa,CAAG,CACpB,CAAEtE,IAAI,CAAE,mBAAmB,CAAEmE,MAAM,CAAE/D,IAAI,CAACC,KAAK,CAAC,KAAK,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,MAAM,CAAE,CAAC,CACjF,CAAEN,IAAI,CAAE,mBAAmB,CAAEmE,MAAM,CAAE/D,IAAI,CAACC,KAAK,CAAC,KAAK,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,KAAK,CAAE,CAAC,CAChF,CAAEN,IAAI,CAAE,kBAAkB,CAAEmE,MAAM,CAAE/D,IAAI,CAACC,KAAK,CAAC,KAAK,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,KAAK,CAAE,CAAC,CAC/E,CAAEN,IAAI,CAAE,eAAe,CAAEmE,MAAM,CAAE/D,IAAI,CAACC,KAAK,CAAC,KAAK,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,KAAK,CAAE,CAAC,CAC5E,CAAEN,IAAI,CAAE,kBAAkB,CAAEmE,MAAM,CAAE/D,IAAI,CAACC,KAAK,CAAC,KAAK,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,KAAK,CAAE,CAAC,CAChF,CAED;AACA,KAAM,CAAAiE,YAAY,CAAG5E,KAAK,CAACC,IAAI,CAAC,CAAEJ,MAAM,CAAE,CAAE,CAAC,CAAE,CAACK,CAAC,CAAEC,CAAC,IAAM,CACxDE,IAAI,CAAE,YAAYF,CAAC,CAAG,CAAC,EAAE,CACzBK,OAAO,CAAE,WAAWL,CAAC,CAAG,CAAC,EAAE,CAC3B0E,YAAY,CAAEpE,IAAI,CAACC,KAAK,CAAC,KAAK,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,KAAK,CAAC,CACvDmE,UAAU,CAAErE,IAAI,CAACC,KAAK,CAAC,EAAE,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CAC/CoE,iBAAiB,CAAEtE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,IAAI,CAC1D,CAAC,CAAC,CAAC,CAEH;AACA,KAAM,CAAAqE,SAAS,CAAGN,UAAU,CAACA,UAAU,CAAC7E,MAAM,CAAG,CAAC,CAAC,CAAC2E,MAAM,CAC1D,KAAM,CAAAS,UAAU,CAAGZ,WAAW,CAAC,GAAI,CAAAvD,IAAI,CAAC,CAAC,CAACoE,QAAQ,CAAC,CAAC,CAAC,CAACV,MAAM,CAE5D;AACA,KAAM,CAAAW,qBAAqB,CAAG,CAAC,EAAE,CAAG1E,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAE;AACxD,KAAM,CAAAyE,oBAAoB,CAAG,CAAC,CAAC,CAAG3E,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAE;AAEtD,MAAO,CACL0E,OAAO,CAAEhB,WAAW,CACpBiB,SAAS,CAAEb,aAAa,CACxBc,MAAM,CAAEb,UAAU,CAClBc,SAAS,CAAEb,aAAa,CACxBC,YAAY,CAAEA,YAAY,CAC1BI,SAAS,CACTC,UAAU,CACVE,qBAAqB,CACrBC,oBAAoB,CACpBL,iBAAiB,CAAEtE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,GAAG,CAAC,CACxD8E,mBAAmB,CAAE,CACnBpF,IAAI,CAAE,SAASI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CAAG,CAAC,EAAE,CACnD6D,MAAM,CAAE/D,IAAI,CAACC,KAAK,CAAC,KAAK,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,KAAK,CAClD,CACF,CAAC,CACH,CAAC,CAED,KAAM,CAAA+E,2BAA2B,CAAG,QAAAA,CAAA,CAAwB,IAAvB,CAAAtB,SAAS,CAAAxE,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,MAAM,CACrD;AACA,GAAI,CAAA+F,gBAAgB,CAAG,EAAE,CACzB,GAAI,CAAAC,SAAS,CAAG,CAAC,CAEjB,GAAIxB,SAAS,GAAK,MAAM,CAAE,CACxB;AACAwB,SAAS,CAAG,CAAC,CACb,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAA/E,IAAI,CAAC,CAAC,CACxB,IAAK,GAAI,CAAAX,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAI,CAAC,CAAEA,CAAC,EAAE,CAAE,CAC3B,KAAM,CAAA2F,IAAI,CAAG,GAAI,CAAAhF,IAAI,CAAC+E,KAAK,CAAC,CAC5BC,IAAI,CAACC,OAAO,CAACF,KAAK,CAACG,OAAO,CAAC,CAAC,CAAG7F,CAAC,CAAC,CACjCwF,gBAAgB,CAACM,IAAI,CAACH,IAAI,CAACI,kBAAkB,CAAC,OAAO,CAAE,CAAE3B,KAAK,CAAE,OAAO,CAAER,GAAG,CAAE,SAAU,CAAC,CAAC,CAAC,CAC7F,CACF,CAAC,IAAM,IAAIK,SAAS,GAAK,OAAO,CAAE,CAChC;AACAwB,SAAS,CAAG,CAAC,CACb,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAA/E,IAAI,CAAC,CAAC,CACxB,IAAK,GAAI,CAAAX,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAI,CAAC,CAAEA,CAAC,EAAE,CAAE,CAC3B,KAAM,CAAA2F,IAAI,CAAG,GAAI,CAAAhF,IAAI,CAAC+E,KAAK,CAAC,CAC5BC,IAAI,CAACC,OAAO,CAACF,KAAK,CAACG,OAAO,CAAC,CAAC,CAAI7F,CAAC,CAAG,CAAE,CAAC,CACvCwF,gBAAgB,CAACM,IAAI,CAACH,IAAI,CAACI,kBAAkB,CAAC,OAAO,CAAE,CAAE3B,KAAK,CAAE,OAAO,CAAER,GAAG,CAAE,SAAU,CAAC,CAAC,CAAC,CAC7F,CACF,CAAC,IAAM,CACL;AACA6B,SAAS,CAAG,CAAC,CACb,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAA/E,IAAI,CAAC,CAAC,CACxB,IAAK,GAAI,CAAAX,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAI,CAAC,CAAEA,CAAC,EAAE,CAAE,CAC3B,KAAM,CAAA2F,IAAI,CAAG,GAAI,CAAAhF,IAAI,CAAC+E,KAAK,CAAC,CAC5BC,IAAI,CAACK,QAAQ,CAACN,KAAK,CAACX,QAAQ,CAAC,CAAC,CAAG/E,CAAC,CAAC,CACnCwF,gBAAgB,CAACM,IAAI,CAACH,IAAI,CAACI,kBAAkB,CAAC,OAAO,CAAE,CAAE3B,KAAK,CAAE,OAAO,CAAE6B,IAAI,CAAE,SAAU,CAAC,CAAC,CAAC,CAC9F,CACF,CAEA;AACA,KAAM,CAAAC,mBAAmB,CAAGV,gBAAgB,CAACW,GAAG,CAACR,IAAI,GAAK,CACxDA,IAAI,CACJS,UAAU,CAAE9F,IAAI,CAACC,KAAK,CAAC,EAAE,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CAC/C6F,gBAAgB,CAAE/F,IAAI,CAACC,KAAK,CAAC,EAAE,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CACtD,CAAC,CAAC,CAAC,CAEH;AACA,KAAM,CAAA8F,iBAAiB,CAAGzG,KAAK,CAACC,IAAI,CAAC,CAAEJ,MAAM,CAAE,CAAE,CAAC,CAAE,CAACK,CAAC,CAAEC,CAAC,IAAM,CAC7DE,IAAI,CAAE,UAAUF,CAAC,CAAG,CAAC,EAAE,CACvBqG,gBAAgB,CAAE/F,IAAI,CAACC,KAAK,CAAC,EAAE,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CACtD,CAAC,CAAC,CAAC,CAEH;AACA,KAAM,CAAA+F,oBAAoB,CAAGf,gBAAgB,CAACW,GAAG,CAACR,IAAI,GAAK,CACzDA,IAAI,CACJa,KAAK,CAAE,GAAG,CAAGlG,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,GAC/B,CAAC,CAAC,CAAC,CAEH;AACA,KAAM,CAAAiG,MAAM,CAAGnG,IAAI,CAACC,KAAK,CAAC,EAAE,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CAClD,KAAM,CAAAkG,OAAO,CAAGpG,IAAI,CAACC,KAAK,CAAC,EAAE,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CACnD,KAAM,CAAAmG,WAAW,CAAG,GAAG,CAAGF,MAAM,CAAGC,OAAO,CAE1C;AACA,KAAM,CAAAE,YAAY,CAAG,CAAC,UAAU,CAAE,SAAS,CAAE,UAAU,CAAC,CACxD,KAAM,CAAAC,QAAQ,CAAGhH,KAAK,CAACC,IAAI,CAAC,CAAEJ,MAAM,CAAEY,IAAI,CAACC,KAAK,CAAC,CAAC,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,CAAC,CAAE,CAAC,CAAE,CAACT,CAAC,CAAEC,CAAC,GAAK,CACnF,KAAM,CAAA8G,IAAI,CAAGF,YAAY,CAACtG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,CAAC,CAAC,CAAC,CACxD,MAAO,CACLsG,IAAI,CACJvF,KAAK,CAAEuF,IAAI,GAAK,UAAU,CACtB,yBAAyB,CACzBA,IAAI,GAAK,SAAS,CAChB,0BAA0B,CAC1B,qBAAqB,CAC3BtF,WAAW,CAAEsF,IAAI,GAAK,UAAU,CAC5B,2CAA2CxG,IAAI,CAACC,KAAK,CAAC,CAAC,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,CAAC,CAAC,yBAAyB,CACrGsG,IAAI,GAAK,SAAS,CAChB,4BAA4BxG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CAAG,CAAC,2CAA2C,CACzG,sEAAsEF,IAAI,CAACC,KAAK,CAAC,CAAC,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,CAAC,CAAC,gBAC/G,CAAC,CACH,CAAC,CAAC,CAEF,MAAO,CACL0F,mBAAmB,CACnBI,iBAAiB,CACjBC,oBAAoB,CACpBQ,cAAc,CAAE,CACdN,MAAM,CACNC,OAAO,CACPC,WACF,CAAC,CACDK,eAAe,CAAE1G,IAAI,CAACC,KAAK,CAAC,EAAE,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CACpDyG,cAAc,CAAE,CAAC,EAAE,CAAG3G,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,EAAI,GAAG,CAC/C0G,oBAAoB,CAAE,GAAG,CAAG5G,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,GAAG,CAC/CqG,QACF,CAAC,CACH,CAAC,CAED;AACA,KAAM,CAAAM,UAAU,CAAG,CACjB;AACA,KAAM,CAAAC,WAAWA,CAAA,CAAG,CAClB,GAAI,CACF,KAAM,CAAAnI,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACkJ,GAAG,CAAC,WAAW,CAAC,CACjD,MAAO,CAAApI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChD;AACA,MAAO,CAAAS,oBAAoB,CAAC,CAAC,CAC/B,CACF,CAAC,CAED,KAAM,CAAAiI,UAAUA,CAACvH,EAAE,CAAE,CACnB,GAAI,CACF,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACkJ,GAAG,CAAC,aAAapH,EAAE,EAAE,CAAC,CACvD,MAAO,CAAAhB,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,0BAA0BmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CACrD,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAA2I,aAAaA,CAACH,IAAI,CAAE,CACxB,GAAI,CACF,KAAM,CAAArI,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACuJ,IAAI,CAAC,WAAW,CAAEJ,IAAI,CAAC,CACxD,MAAO,CAAArI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/C,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAA6I,aAAaA,CAAC1H,EAAE,CAAEqH,IAAI,CAAE,CAC5B,GAAI,CACF,KAAM,CAAArI,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACyJ,GAAG,CAAC,aAAa3H,EAAE,EAAE,CAAEqH,IAAI,CAAC,CAC7D,MAAO,CAAArI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,0BAA0BmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CACrD,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAA+I,aAAaA,CAAC5H,EAAE,CAAE,CACtB,GAAI,CACF,KAAM,CAAA9B,SAAS,CAAC2J,MAAM,CAAC,aAAa7H,EAAE,EAAE,CAAC,CACzC,MAAO,KAAI,CACb,CAAE,MAAOnB,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,0BAA0BmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CACrD,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA,KAAM,CAAAiJ,gBAAgBA,CAAA,CAAG,CACvB,GAAI,CACF,KAAM,CAAA9I,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACkJ,GAAG,CAAC,gBAAgB,CAAC,CACtD,MAAO,CAAApI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrD;AACA,MAAO,CAAAiC,yBAAyB,CAAC,CAAC,CACpC,CACF,CAAC,CAED,KAAM,CAAAiH,eAAeA,CAAC/H,EAAE,CAAE,CACxB,GAAI,CACF,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACkJ,GAAG,CAAC,kBAAkBpH,EAAE,EAAE,CAAC,CAC5D,MAAO,CAAAhB,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,+BAA+BmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CAC1D,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAmJ,kBAAkBA,CAACX,IAAI,CAAE,CAC7B,GAAI,CACF,KAAM,CAAArI,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACuJ,IAAI,CAAC,gBAAgB,CAAEJ,IAAI,CAAC,CAC7D,MAAO,CAAArI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpD,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAoJ,kBAAkBA,CAACjI,EAAE,CAAEqH,IAAI,CAAE,CACjC,GAAI,CACF,KAAM,CAAArI,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACyJ,GAAG,CAAC,kBAAkB3H,EAAE,EAAE,CAAEqH,IAAI,CAAC,CAClE,MAAO,CAAArI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,+BAA+BmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CAC1D,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAqJ,kBAAkBA,CAAClI,EAAE,CAAE,CAC3B,GAAI,CACF,KAAM,CAAA9B,SAAS,CAAC2J,MAAM,CAAC,kBAAkB7H,EAAE,EAAE,CAAC,CAC9C,MAAO,KAAI,CACb,CAAE,MAAOnB,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,+BAA+BmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CAC1D,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA,KAAM,CAAAsJ,QAAQA,CAAA,CAAG,CACf,GAAI,CACF,KAAM,CAAAnJ,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACkJ,GAAG,CAAC,QAAQ,CAAC,CAC9C,MAAO,CAAApI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C;AACA,MAAO,CAAAuC,iBAAiB,CAAC,CAAC,CAC5B,CACF,CAAC,CAED,KAAM,CAAAgH,OAAOA,CAACpI,EAAE,CAAE,CAChB,GAAI,CACF,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACkJ,GAAG,CAAC,UAAUpH,EAAE,EAAE,CAAC,CACpD,MAAO,CAAAhB,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,uBAAuBmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CAClD,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAwJ,UAAUA,CAAChB,IAAI,CAAE,CACrB,GAAI,CACF,KAAM,CAAArI,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACuJ,IAAI,CAAC,QAAQ,CAAEJ,IAAI,CAAC,CACrD,MAAO,CAAArI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAyJ,UAAUA,CAACtI,EAAE,CAAEqH,IAAI,CAAE,CACzB,GAAI,CACF,KAAM,CAAArI,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACyJ,GAAG,CAAC,UAAU3H,EAAE,EAAE,CAAEqH,IAAI,CAAC,CAC1D,MAAO,CAAArI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,uBAAuBmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CAClD,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAA0J,UAAUA,CAACvI,EAAE,CAAE,CACnB,GAAI,CACF,KAAM,CAAA9B,SAAS,CAAC2J,MAAM,CAAC,UAAU7H,EAAE,EAAE,CAAC,CACtC,MAAO,KAAI,CACb,CAAE,MAAOnB,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,uBAAuBmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CAClD,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA,KAAM,CAAA2J,UAAUA,CAAA,CAAG,CACjB,GAAI,CACF,KAAM,CAAAxJ,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACkJ,GAAG,CAAC,UAAU,CAAC,CAChD,MAAO,CAAApI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/C;AACA,MAAO,CAAA8C,mBAAmB,CAAC,CAAC,CAC9B,CACF,CAAC,CAED,KAAM,CAAA8G,SAASA,CAACzI,EAAE,CAAE,CAClB,GAAI,CACF,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACkJ,GAAG,CAAC,YAAYpH,EAAE,EAAE,CAAC,CACtD,MAAO,CAAAhB,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,yBAAyBmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CACpD,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAA6J,YAAYA,CAACrB,IAAI,CAAE,CACvB,GAAI,CACF,KAAM,CAAArI,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACuJ,IAAI,CAAC,UAAU,CAAEJ,IAAI,CAAC,CACvD,MAAO,CAAArI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAA8J,YAAYA,CAAC3I,EAAE,CAAEqH,IAAI,CAAE,CAC3B,GAAI,CACF,KAAM,CAAArI,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACyJ,GAAG,CAAC,YAAY3H,EAAE,EAAE,CAAEqH,IAAI,CAAC,CAC5D,MAAO,CAAArI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,yBAAyBmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CACpD,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAA+J,YAAYA,CAAC5I,EAAE,CAAE,CACrB,GAAI,CACF,KAAM,CAAA9B,SAAS,CAAC2J,MAAM,CAAC,YAAY7H,EAAE,EAAE,CAAC,CACxC,MAAO,KAAI,CACb,CAAE,MAAOnB,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,yBAAyBmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CACpD,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA,KAAM,CAAAgK,aAAaA,CAAA,CAAG,CACpB,GAAI,CACF,KAAM,CAAA7J,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACkJ,GAAG,CAAC,aAAa,CAAC,CACnD,MAAO,CAAApI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CAClD;AACA,MAAO,CAAAkD,sBAAsB,CAAC,CAAC,CACjC,CACF,CAAC,CAED,KAAM,CAAA+G,WAAWA,CAAC9I,EAAE,CAAE,CACpB,GAAI,CACF,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACkJ,GAAG,CAAC,eAAepH,EAAE,EAAE,CAAC,CACzD,MAAO,CAAAhB,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,2BAA2BmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CACtD,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAkK,cAAcA,CAAC1B,IAAI,CAAE,CACzB,GAAI,CACF,KAAM,CAAArI,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACuJ,IAAI,CAAC,aAAa,CAAEJ,IAAI,CAAC,CAC1D,MAAO,CAAArI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChD,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAmK,cAAcA,CAAChJ,EAAE,CAAEqH,IAAI,CAAE,CAC7B,GAAI,CACF,KAAM,CAAArI,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACyJ,GAAG,CAAC,eAAe3H,EAAE,EAAE,CAAEqH,IAAI,CAAC,CAC/D,MAAO,CAAArI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,2BAA2BmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CACtD,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAoK,cAAcA,CAACjJ,EAAE,CAAE,CACvB,GAAI,CACF,KAAM,CAAA9B,SAAS,CAAC2J,MAAM,CAAC,eAAe7H,EAAE,EAAE,CAAC,CAC3C,MAAO,KAAI,CACb,CAAE,MAAOnB,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,2BAA2BmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CACtD,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA,KAAM,CAAAqK,SAASA,CAAA,CAAG,CAChB,GAAI,CACF,KAAM,CAAAlK,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACkJ,GAAG,CAAC,SAAS,CAAC,CAC/C,MAAO,CAAApI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C;AACA,MAAO,CAAAyD,kBAAkB,CAAC,CAAC,CAC7B,CACF,CAAC,CAED,KAAM,CAAA6G,QAAQA,CAACnJ,EAAE,CAAE,CACjB,GAAI,CACF,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACkJ,GAAG,CAAC,WAAWpH,EAAE,EAAE,CAAC,CACrD,MAAO,CAAAhB,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,wBAAwBmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CACnD,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAuK,WAAWA,CAAC/B,IAAI,CAAE,CACtB,GAAI,CACF,KAAM,CAAArI,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACuJ,IAAI,CAAC,SAAS,CAAEJ,IAAI,CAAC,CACtD,MAAO,CAAArI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAwK,WAAWA,CAACrJ,EAAE,CAAEqH,IAAI,CAAE,CAC1B,GAAI,CACF,KAAM,CAAArI,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACyJ,GAAG,CAAC,WAAW3H,EAAE,EAAE,CAAEqH,IAAI,CAAC,CAC3D,MAAO,CAAArI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,wBAAwBmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CACnD,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAyK,WAAWA,CAACtJ,EAAE,CAAE,CACpB,GAAI,CACF,KAAM,CAAA9B,SAAS,CAAC2J,MAAM,CAAC,WAAW7H,EAAE,EAAE,CAAC,CACvC,MAAO,KAAI,CACb,CAAE,MAAOnB,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,wBAAwBmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CACnD,MAAO,MAAK,CACd,CACF,CAAC,CAED,KAAM,CAAA0K,uBAAuBA,CAACC,OAAO,CAAE,CACrC,GAAI,CACF,KAAM,CAAAxK,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACuJ,IAAI,CAAC,WAAW+B,OAAO,sBAAsB,CAAC,CAC/E,MAAO,CAAAxK,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,0BAA0B2K,OAAO,eAAe,CAAE3K,KAAK,CAAC,CACtE,MAAO,KAAI,CACb,CACF,CAAC,CAED;AACA,KAAM,CAAA4K,SAASA,CAAA,CAAG,CAChB,GAAI,CACF,KAAM,CAAAzK,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACkJ,GAAG,CAAC,SAAS,CAAC,CAC/C,MAAO,CAAApI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C;AACA,MAAO,CAAAqE,kBAAkB,CAAC,CAAC,CAC7B,CACF,CAAC,CAED,KAAM,CAAAwG,QAAQA,CAAC1J,EAAE,CAAE,CACjB,GAAI,CACF,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACkJ,GAAG,CAAC,WAAWpH,EAAE,EAAE,CAAC,CACrD,MAAO,CAAAhB,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,wBAAwBmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CACnD,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAA8K,WAAWA,CAACtC,IAAI,CAAE,CACtB,GAAI,CACF,KAAM,CAAArI,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACuJ,IAAI,CAAC,SAAS,CAAEJ,IAAI,CAAC,CACtD,MAAO,CAAArI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAA+K,WAAWA,CAAC5J,EAAE,CAAEqH,IAAI,CAAE,CAC1B,GAAI,CACF,KAAM,CAAArI,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACyJ,GAAG,CAAC,WAAW3H,EAAE,EAAE,CAAEqH,IAAI,CAAC,CAC3D,MAAO,CAAArI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,wBAAwBmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CACnD,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAgL,WAAWA,CAAC7J,EAAE,CAAE,CACpB,GAAI,CACF,KAAM,CAAA9B,SAAS,CAAC2J,MAAM,CAAC,WAAW7H,EAAE,EAAE,CAAC,CACvC,MAAO,KAAI,CACb,CAAE,MAAOnB,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,wBAAwBmB,EAAE,GAAG,CAAEnB,KAAK,CAAC,CACnD,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA,KAAM,CAAAiL,cAAcA,CAAA,CAAsB,IAArB,CAAAC,SAAS,CAAAvK,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,OAAO,CACtC,GAAI,CACF,KAAM,CAAAR,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACkJ,GAAG,CAAC,4BAA4B2C,SAAS,EAAE,CAAC,CAC7E,MAAO,CAAA/K,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpD;AACA,MAAO,CAAAkF,uBAAuB,CAACgG,SAAS,CAAC,CAC3C,CACF,CAAC,CAED;AACA,KAAM,CAAAC,kBAAkBA,CAAA,CAAqB,IAApB,CAAAC,SAAS,CAAAzK,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,MAAM,CACzC,GAAI,CACF,KAAM,CAAAR,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACkJ,GAAG,CAAC,oCAAoC6C,SAAS,EAAE,CAAC,CACrF,MAAO,CAAAjL,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CACxD;AACA,MAAO,CAAAyG,2BAA2B,CAAC2E,SAAS,CAAC,CAC/C,CACF,CAAC,CAED;AACA,KAAM,CAAAC,gBAAgBA,CAAA,CAAG,CACvB,GAAI,CACF,KAAM,CAAAlL,QAAQ,CAAG,KAAM,CAAAd,SAAS,CAACkJ,GAAG,CAAC,sBAAsB,CAAC,CAC5D,MAAO,CAAApI,QAAQ,CAACqI,IAAI,CACtB,CAAE,MAAOxI,KAAK,CAAE,CACdyI,OAAO,CAACzI,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtD;AACA,MAAO,CACLsL,KAAK,CAAE,CACLC,aAAa,CAAE,GAAG,CAAG/J,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CACnD8J,kBAAkB,CAAE,EAAE,CAAGhK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CACvD+J,aAAa,CAAE,EAAE,CAAGjK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CAClDgK,iBAAiB,CAAE,EAAE,CAAGlK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CACtDkE,YAAY,CAAE,KAAK,CAAGpE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,KAAK,CAAC,CACvDiK,kBAAkB,CAAE,EAAE,CAAGnK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CACxD,CAAC,CACDkK,cAAc,CAAE7K,KAAK,CAACC,IAAI,CAAC,CAAEJ,MAAM,CAAE,CAAE,CAAC,CAAE,CAACK,CAAC,CAAEC,CAAC,IAAM,CACnDC,EAAE,CAAE,YAAYD,CAAC,CAAG,CAAC,EAAE,CACvB8G,IAAI,CAAE,CAAC,UAAU,CAAE,OAAO,CAAE,SAAS,CAAE,QAAQ,CAAC,CAACxG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,CAAC,CAAC,CAAC,CAC/EgB,WAAW,CAAE,mBAAmBxB,CAAC,CAAG,CAAC,EAAE,CACvC2K,SAAS,CAAE,GAAI,CAAAhK,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGN,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,QAAQ,CAAG,CAAC,CAAC,CAACK,WAAW,CAAC,CAC7E,CAAC,CAAC,CACJ,CAAC,CACH,CACF,CACF,CAAC,CAED,cAAe,CAAAsG,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}