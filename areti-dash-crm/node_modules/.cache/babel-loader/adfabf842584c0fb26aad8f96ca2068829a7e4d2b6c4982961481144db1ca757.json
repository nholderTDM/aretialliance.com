{"ast":null,"code":"import Keycloak from 'keycloak-js';\nimport axios from 'axios';\n\n// Debugging helper - add this right after your imports\nfunction debugLog(...args) {\n  console.log('[Keycloak Debug]', ...args);\n}\n\n// Keycloak initialization options\nconst keycloakConfig = {\n  url: 'http://localhost:8080',\n  realm: 'areti-alliance',\n  clientId: 'areti-crm-client'\n};\n\n// Initialize Keycloak\nconst keycloak = new Keycloak(keycloakConfig);\n\n// Authentication service\nconst AuthService = {\n  // Initialize Keycloak\n  init: () => {\n    debugLog('Initializing Keycloak');\n    return new Promise((resolve, reject) => {\n      keycloak.init({\n        onLoad: 'check-sso',\n        silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n        pkceMethod: 'S256',\n        enableLogging: true,\n        checkLoginIframe: false // Add this line\n      }).then(authenticated => {\n        debugLog('Keycloak initialized, authenticated:', authenticated);\n        debugLog('Token exists:', !!keycloak.token);\n        debugLog('Token parsed:', keycloak.tokenParsed);\n        if (authenticated) {\n          var _keycloak$tokenParsed, _keycloak$tokenParsed2, _keycloak$tokenParsed3, _keycloak$tokenParsed4;\n          debugLog('User is authenticated, token exists:', !!keycloak.token);\n\n          // Store basic info directly from token as a fallback\n          const basicUserInfo = {\n            name: keycloak.tokenParsed.preferred_username || keycloak.tokenParsed.name,\n            email: keycloak.tokenParsed.email || keycloak.tokenParsed.preferred_username,\n            role: (_keycloak$tokenParsed = keycloak.tokenParsed.realm_access) !== null && _keycloak$tokenParsed !== void 0 && (_keycloak$tokenParsed2 = _keycloak$tokenParsed.roles) !== null && _keycloak$tokenParsed2 !== void 0 && _keycloak$tokenParsed2.includes('admin') ? 'admin' : (_keycloak$tokenParsed3 = keycloak.tokenParsed.realm_access) !== null && _keycloak$tokenParsed3 !== void 0 && (_keycloak$tokenParsed4 = _keycloak$tokenParsed3.roles) !== null && _keycloak$tokenParsed4 !== void 0 && _keycloak$tokenParsed4.includes('manager') ? 'manager' : 'user',\n            token: keycloak.token,\n            timestamp: new Date().getTime()\n          };\n          localStorage.setItem('aretiUser_backup', JSON.stringify(basicUserInfo));\n          debugLog('Stored backup user info', basicUserInfo);\n\n          //Try token exchange\n          AuthService.exchangeToken().then(() => {\n            debugLog('Token exchange successful');\n            resolve(authenticated);\n          }).catch(err => {\n            debugLog('Token exchange error:', err);\n            resolve(false);\n          });\n        } else {\n          debugLog('User is not authenticated');\n          resolve(authenticated);\n        }\n      }).catch(error => {\n        debugLog('Keycloak init error:', error);\n        reject(error);\n      });\n    });\n  },\n  // Log in\n  login: () => {\n    debugLog('Starting login process');\n    keycloak.login();\n  },\n  // Log out\n  logout: () => {\n    debugLog('Logging out');\n    // Clear local tokens\n    localStorage.removeItem('aretiUser');\n    // Logout from Keycloak\n    keycloak.logout();\n  },\n  // Check if authenticated\n  isAuthenticated: () => {\n    const hasToken = !!keycloak.token;\n    debugLog('Checking if authenticated:', hasToken);\n    return hasToken;\n  },\n  // Exchange Keycloak token for app session token\n  exchangeToken: async () => {\n    try {\n      var _keycloak$token;\n      debugLog('Starting token exchange, token exists:', !!keycloak.token);\n      debugLog('Token length:', (_keycloak$token = keycloak.token) === null || _keycloak$token === void 0 ? void 0 : _keycloak$token.length);\n      const authServiceUrl = 'http://localhost:4000';\n      debugLog('Posting to auth service:', `${authServiceUrl}/auth/token`);\n      const response = await axios.post(`${authServiceUrl}/auth/token`, {\n        token: keycloak.token\n      });\n      debugLog('Auth service response:', response.data);\n      const {\n        token\n      } = response.data;\n\n      // Parse token to get user info\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const payload = JSON.parse(window.atob(base64));\n      debugLog('Parsed token payload:', payload);\n\n      // Store in localStorage\n      const userInfo = {\n        email: payload.email,\n        name: payload.name,\n        role: payload.role,\n        token: token,\n        timestamp: new Date().getTime()\n      };\n      debugLog('Storing user info in localStorage:', userInfo);\n      localStorage.setItem('aretiUser', JSON.stringify(userInfo));\n      return token;\n    } catch (error) {\n      debugLog('Token exchange error:', error);\n      if (error.response) {\n        debugLog('Error response:', error.response.data);\n        debugLog('Error status:', error.response.status);\n      }\n      throw error;\n    }\n  },\n  // Get user profile\n  getUserProfile: () => {\n    const user = localStorage.getItem('aretiUser');\n    debugLog('Getting user profile from localStorage:', user ? 'found' : 'not found');\n    return user ? JSON.parse(user) : null;\n  },\n  // Check if token is valid\n  hasValidToken: () => {\n    const user = localStorage.getItem('aretiUser');\n    if (!user) {\n      debugLog('No user in localStorage');\n      return false;\n    }\n    const userData = JSON.parse(user);\n    const now = new Date().getTime();\n    // Check if token is expired (24 hour validity)\n    const isValid = now - userData.timestamp < 24 * 60 * 60 * 1000;\n    debugLog('Token valid:', isValid);\n    return isValid;\n  },\n  // Get authorization header\n  getAuthHeader: () => {\n    const user = localStorage.getItem('aretiUser');\n    if (!user) {\n      debugLog('No user in localStorage for auth header');\n      return {};\n    }\n    const userData = JSON.parse(user);\n    debugLog('Created auth header with token');\n    return {\n      'Authorization': `Bearer ${userData.token}`\n    };\n  }\n};\nexport default AuthService;","map":{"version":3,"names":["Keycloak","axios","debugLog","args","console","log","keycloakConfig","url","realm","clientId","keycloak","AuthService","init","Promise","resolve","reject","onLoad","silentCheckSsoRedirectUri","window","location","origin","pkceMethod","enableLogging","checkLoginIframe","then","authenticated","token","tokenParsed","_keycloak$tokenParsed","_keycloak$tokenParsed2","_keycloak$tokenParsed3","_keycloak$tokenParsed4","basicUserInfo","name","preferred_username","email","role","realm_access","roles","includes","timestamp","Date","getTime","localStorage","setItem","JSON","stringify","exchangeToken","catch","err","error","login","logout","removeItem","isAuthenticated","hasToken","_keycloak$token","length","authServiceUrl","response","post","data","base64Url","split","base64","replace","payload","parse","atob","userInfo","status","getUserProfile","user","getItem","hasValidToken","userData","now","isValid","getAuthHeader"],"sources":["C:/Users/Administrator/Desktop/aretialliance/areti-dash-crm/src/services/keycloak.js"],"sourcesContent":["import Keycloak from 'keycloak-js';\r\nimport axios from 'axios';\r\n\r\n// Debugging helper - add this right after your imports\r\nfunction debugLog(...args) {\r\n  console.log('[Keycloak Debug]', ...args);\r\n}\r\n\r\n// Keycloak initialization options\r\nconst keycloakConfig = {\r\n  url: 'http://localhost:8080',\r\n  realm: 'areti-alliance',\r\n  clientId: 'areti-crm-client'\r\n};\r\n\r\n// Initialize Keycloak\r\nconst keycloak = new Keycloak(keycloakConfig);\r\n\r\n// Authentication service\r\nconst AuthService = {\r\n  // Initialize Keycloak\r\n  init: () => {\r\n    debugLog('Initializing Keycloak');\r\n    return new Promise((resolve, reject) => {\r\n      keycloak.init({\r\n        onLoad: 'check-sso',\r\n        silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\r\n        pkceMethod: 'S256',\r\n        enableLogging: true,\r\n        checkLoginIframe: false // Add this line\r\n      })\r\n        .then(authenticated => {\r\n          debugLog('Keycloak initialized, authenticated:', authenticated);\r\n          debugLog('Token exists:', !!keycloak.token);\r\n          debugLog('Token parsed:', keycloak.tokenParsed);\r\n          \r\n          if (authenticated) {\r\n            debugLog('User is authenticated, token exists:', !!keycloak.token);\r\n            \r\n            // Store basic info directly from token as a fallback\r\n            const basicUserInfo = {\r\n              name: keycloak.tokenParsed.preferred_username || keycloak.tokenParsed.name,\r\n              email: keycloak.tokenParsed.email || keycloak.tokenParsed.preferred_username,\r\n              role: keycloak.tokenParsed.realm_access?.roles?.includes('admin') ? 'admin' :\r\n                    keycloak.tokenParsed.realm_access?.roles?.includes('manager') ? 'manager' : 'user',\r\n              token: keycloak.token,\r\n              timestamp: new Date().getTime()\r\n            };\r\n            \r\n            localStorage.setItem('aretiUser_backup', JSON.stringify(basicUserInfo));\r\n            debugLog('Stored backup user info', basicUserInfo);           \r\n           \r\n           //Try token exchange\r\n          AuthService.exchangeToken().then(() => {\r\n              debugLog('Token exchange successful');\r\n              resolve(authenticated);\r\n            }).catch(err => {\r\n              debugLog('Token exchange error:', err);\r\n              resolve(false);\r\n            });\r\n          } else {\r\n            debugLog('User is not authenticated');\r\n            resolve(authenticated);\r\n          }\r\n        })\r\n        .catch(error => {\r\n          debugLog('Keycloak init error:', error);\r\n          reject(error);\r\n        });\r\n    });\r\n  },\r\n\r\n  // Log in\r\n  login: () => {\r\n    debugLog('Starting login process');\r\n    keycloak.login();\r\n  },\r\n\r\n  // Log out\r\n  logout: () => {\r\n    debugLog('Logging out');\r\n    // Clear local tokens\r\n    localStorage.removeItem('aretiUser');\r\n    // Logout from Keycloak\r\n    keycloak.logout();\r\n  },\r\n\r\n  // Check if authenticated\r\n  isAuthenticated: () => {\r\n    const hasToken = !!keycloak.token;\r\n    debugLog('Checking if authenticated:', hasToken);\r\n    return hasToken;\r\n  },\r\n\r\n  // Exchange Keycloak token for app session token\r\n  exchangeToken: async () => {\r\n    try {\r\n      debugLog('Starting token exchange, token exists:', !!keycloak.token);\r\n      debugLog('Token length:', keycloak.token?.length);\r\n      \r\n      const authServiceUrl = 'http://localhost:4000';\r\n      \r\n      debugLog('Posting to auth service:', `${authServiceUrl}/auth/token`);\r\n      const response = await axios.post(`${authServiceUrl}/auth/token`, {\r\n        token: keycloak.token\r\n      });\r\n      \r\n      debugLog('Auth service response:', response.data);\r\n      \r\n      const { token } = response.data;\r\n      \r\n      // Parse token to get user info\r\n      const base64Url = token.split('.')[1];\r\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n      const payload = JSON.parse(window.atob(base64));\r\n      \r\n      debugLog('Parsed token payload:', payload);\r\n      \r\n      // Store in localStorage\r\n      const userInfo = {\r\n        email: payload.email,\r\n        name: payload.name,\r\n        role: payload.role,\r\n        token: token,\r\n        timestamp: new Date().getTime()\r\n      };\r\n      \r\n      debugLog('Storing user info in localStorage:', userInfo);\r\n      localStorage.setItem('aretiUser', JSON.stringify(userInfo));\r\n      \r\n      return token;\r\n    } catch (error) {\r\n      debugLog('Token exchange error:', error);\r\n      if (error.response) {\r\n        debugLog('Error response:', error.response.data);\r\n        debugLog('Error status:', error.response.status);\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get user profile\r\n  getUserProfile: () => {\r\n    const user = localStorage.getItem('aretiUser');\r\n    debugLog('Getting user profile from localStorage:', user ? 'found' : 'not found');\r\n    return user ? JSON.parse(user) : null;\r\n  },\r\n\r\n  // Check if token is valid\r\n  hasValidToken: () => {\r\n    const user = localStorage.getItem('aretiUser');\r\n    if (!user) {\r\n      debugLog('No user in localStorage');\r\n      return false;\r\n    }\r\n    \r\n    const userData = JSON.parse(user);\r\n    const now = new Date().getTime();\r\n    // Check if token is expired (24 hour validity)\r\n    const isValid = now - userData.timestamp < 24 * 60 * 60 * 1000;\r\n    debugLog('Token valid:', isValid);\r\n    return isValid;\r\n  },\r\n\r\n  // Get authorization header\r\n  getAuthHeader: () => {\r\n    const user = localStorage.getItem('aretiUser');\r\n    if (!user) {\r\n      debugLog('No user in localStorage for auth header');\r\n      return {};\r\n    }\r\n    \r\n    const userData = JSON.parse(user);\r\n    debugLog('Created auth header with token');\r\n    return {\r\n      'Authorization': `Bearer ${userData.token}`\r\n    };\r\n  }\r\n};\r\n\r\nexport default AuthService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}