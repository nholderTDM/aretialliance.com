{"ast":null,"code":"import Keycloak from'keycloak-js';import axios from'axios';// Configuration from environment variables\nconst KEYCLOAK_URL=process.env.REACT_APP_KEYCLOAK_URL||'https://auth.aretialliance.com';const KEYCLOAK_REALM=process.env.REACT_APP_KEYCLOAK_REALM||'areti-alliance';const KEYCLOAK_CLIENT_ID=process.env.REACT_APP_KEYCLOAK_CLIENT_ID||'areti-crm-client';const API_URL=process.env.REACT_APP_API_URL||'https://api.aretialliance.com';// Debugging helper\nfunction debugLog(){if(process.env.NODE_ENV!=='production'){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}console.log('[Auth]',...args);}}// Initialize Keycloak instance\nconst keycloakConfig={url:KEYCLOAK_URL,realm:KEYCLOAK_REALM,clientId:KEYCLOAK_CLIENT_ID};const keycloak=new Keycloak(keycloakConfig);// Authentication service\nconst AuthService={// Initialize Keycloak with proper configuration\ninit:()=>{debugLog('Initializing Keycloak');return new Promise((resolve,reject)=>{keycloak.init({onLoad:'check-sso',silentCheckSsoRedirectUri:window.location.origin+'/dashboard/silent-check-sso.html',pkceMethod:'S256',checkLoginIframe:false}).then(authenticated=>{debugLog('Keycloak initialized, authenticated:',authenticated);if(authenticated){debugLog('User authenticated with valid token');// Store basic user info from token\nconst basicUserInfo={name:keycloak.tokenParsed.preferred_username||keycloak.tokenParsed.name,email:keycloak.tokenParsed.email||keycloak.tokenParsed.preferred_username,role:AuthService.getUserRole(keycloak.tokenParsed),token:keycloak.token,timestamp:new Date().getTime()};localStorage.setItem('aretiUser',JSON.stringify(basicUserInfo));// Setup token refresh\nAuthService.setupTokenRefresh();resolve(authenticated);}else{debugLog('User not authenticated');localStorage.removeItem('aretiUser');resolve(authenticated);}}).catch(error=>{debugLog('Keycloak init error:',error);reject(error);});});},// Get user role from token\ngetUserRole:tokenParsed=>{if(!tokenParsed||!tokenParsed.realm_access){return'user';}const roles=tokenParsed.realm_access.roles||[];if(roles.includes('admin'))return'admin';if(roles.includes('manager'))return'manager';return'user';},// Setup automatic token refresh\nsetupTokenRefresh:()=>{keycloak.onTokenExpired=()=>{debugLog('Token expired, refreshing...');keycloak.updateToken(30).then(refreshed=>{if(refreshed){debugLog('Token refreshed');// Update stored user info with new token\nconst user=AuthService.getUserProfile();if(user){user.token=keycloak.token;user.timestamp=new Date().getTime();localStorage.setItem('aretiUser',JSON.stringify(user));}}else{debugLog('Token not refreshed, still valid');}}).catch(error=>{debugLog('Failed to refresh token:',error);// Force re-login on refresh failure\nAuthService.login();});};},// Log in\nlogin:()=>{debugLog('Starting login process');keycloak.login({redirectUri:window.location.origin+'/dashboard'});},// Log out\nlogout:()=>{debugLog('Logging out');localStorage.removeItem('aretiUser');keycloak.logout({redirectUri:window.location.origin});},// Check if authenticated\nisAuthenticated:()=>{// Check local storage first\nconst user=localStorage.getItem('aretiUser');if(user){const userData=JSON.parse(user);const now=new Date().getTime();// If token is relatively fresh (less than 5 minutes old), consider authenticated\nif(now-userData.timestamp<5*60*1000){return true;}}// Otherwise check Keycloak token\nreturn!!keycloak.token;},// Get user profile\ngetUserProfile:()=>{const user=localStorage.getItem('aretiUser');return user?JSON.parse(user):null;},// Get authorization header for API requests\ngetAuthHeader:()=>{const user=AuthService.getUserProfile();if(!user)return{};return{'Authorization':`Bearer ${user.token}`};},// Check token validity\nhasValidToken:()=>{const user=localStorage.getItem('aretiUser');if(!user){return false;}const userData=JSON.parse(user);const now=new Date().getTime();// Check if token is expired (24 hour validity)\nreturn now-userData.timestamp<24*60*60*1000;}};export default AuthService;","map":{"version":3,"names":["Keycloak","axios","KEYCLOAK_URL","process","env","REACT_APP_KEYCLOAK_URL","KEYCLOAK_REALM","REACT_APP_KEYCLOAK_REALM","KEYCLOAK_CLIENT_ID","REACT_APP_KEYCLOAK_CLIENT_ID","API_URL","REACT_APP_API_URL","debugLog","NODE_ENV","_len","arguments","length","args","Array","_key","console","log","keycloakConfig","url","realm","clientId","keycloak","AuthService","init","Promise","resolve","reject","onLoad","silentCheckSsoRedirectUri","window","location","origin","pkceMethod","checkLoginIframe","then","authenticated","basicUserInfo","name","tokenParsed","preferred_username","email","role","getUserRole","token","timestamp","Date","getTime","localStorage","setItem","JSON","stringify","setupTokenRefresh","removeItem","catch","error","realm_access","roles","includes","onTokenExpired","updateToken","refreshed","user","getUserProfile","login","redirectUri","logout","isAuthenticated","getItem","userData","parse","now","getAuthHeader","hasValidToken"],"sources":["C:/Users/Administrator/Desktop/aretialliance/areti-dash-crm/src/services/keycloak.js"],"sourcesContent":["import Keycloak from 'keycloak-js';\r\nimport axios from 'axios';\r\n\r\n// Configuration from environment variables\r\nconst KEYCLOAK_URL = process.env.REACT_APP_KEYCLOAK_URL || 'https://auth.aretialliance.com';\r\nconst KEYCLOAK_REALM = process.env.REACT_APP_KEYCLOAK_REALM || 'areti-alliance';\r\nconst KEYCLOAK_CLIENT_ID = process.env.REACT_APP_KEYCLOAK_CLIENT_ID || 'areti-crm-client';\r\nconst API_URL = process.env.REACT_APP_API_URL || 'https://api.aretialliance.com';\r\n\r\n// Debugging helper\r\nfunction debugLog(...args) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    console.log('[Auth]', ...args);\r\n  }\r\n}\r\n\r\n// Initialize Keycloak instance\r\nconst keycloakConfig = {\r\n  url: KEYCLOAK_URL,\r\n  realm: KEYCLOAK_REALM,\r\n  clientId: KEYCLOAK_CLIENT_ID\r\n};\r\n\r\nconst keycloak = new Keycloak(keycloakConfig);\r\n\r\n// Authentication service\r\nconst AuthService = {\r\n  // Initialize Keycloak with proper configuration\r\n  init: () => {\r\n    debugLog('Initializing Keycloak');\r\n    return new Promise((resolve, reject) => {\r\n      keycloak.init({\r\n        onLoad: 'check-sso',\r\n        silentCheckSsoRedirectUri: window.location.origin + '/dashboard/silent-check-sso.html',\r\n        pkceMethod: 'S256',\r\n        checkLoginIframe: false\r\n      })\r\n        .then(authenticated => {\r\n          debugLog('Keycloak initialized, authenticated:', authenticated);\r\n          \r\n          if (authenticated) {\r\n            debugLog('User authenticated with valid token');\r\n            \r\n            // Store basic user info from token\r\n            const basicUserInfo = {\r\n              name: keycloak.tokenParsed.preferred_username || keycloak.tokenParsed.name,\r\n              email: keycloak.tokenParsed.email || keycloak.tokenParsed.preferred_username,\r\n              role: AuthService.getUserRole(keycloak.tokenParsed),\r\n              token: keycloak.token,\r\n              timestamp: new Date().getTime()\r\n            };\r\n            \r\n            localStorage.setItem('aretiUser', JSON.stringify(basicUserInfo));\r\n            \r\n            // Setup token refresh\r\n            AuthService.setupTokenRefresh();\r\n            \r\n            resolve(authenticated);\r\n          } else {\r\n            debugLog('User not authenticated');\r\n            localStorage.removeItem('aretiUser');\r\n            resolve(authenticated);\r\n          }\r\n        })\r\n        .catch(error => {\r\n          debugLog('Keycloak init error:', error);\r\n          reject(error);\r\n        });\r\n    });\r\n  },\r\n\r\n  // Get user role from token\r\n  getUserRole: (tokenParsed) => {\r\n    if (!tokenParsed || !tokenParsed.realm_access) {\r\n      return 'user';\r\n    }\r\n    \r\n    const roles = tokenParsed.realm_access.roles || [];\r\n    if (roles.includes('admin')) return 'admin';\r\n    if (roles.includes('manager')) return 'manager';\r\n    return 'user';\r\n  },\r\n\r\n  // Setup automatic token refresh\r\n  setupTokenRefresh: () => {\r\n    keycloak.onTokenExpired = () => {\r\n      debugLog('Token expired, refreshing...');\r\n      keycloak.updateToken(30).then((refreshed) => {\r\n        if (refreshed) {\r\n          debugLog('Token refreshed');\r\n          // Update stored user info with new token\r\n          const user = AuthService.getUserProfile();\r\n          if (user) {\r\n            user.token = keycloak.token;\r\n            user.timestamp = new Date().getTime();\r\n            localStorage.setItem('aretiUser', JSON.stringify(user));\r\n          }\r\n        } else {\r\n          debugLog('Token not refreshed, still valid');\r\n        }\r\n      }).catch(error => {\r\n        debugLog('Failed to refresh token:', error);\r\n        // Force re-login on refresh failure\r\n        AuthService.login();\r\n      });\r\n    };\r\n  },\r\n\r\n  // Log in\r\n  login: () => {\r\n    debugLog('Starting login process');\r\n    keycloak.login({\r\n      redirectUri: window.location.origin + '/dashboard'\r\n    });\r\n  },\r\n\r\n  // Log out\r\n  logout: () => {\r\n    debugLog('Logging out');\r\n    localStorage.removeItem('aretiUser');\r\n    keycloak.logout({\r\n      redirectUri: window.location.origin\r\n    });\r\n  },\r\n\r\n  // Check if authenticated\r\n  isAuthenticated: () => {\r\n    // Check local storage first\r\n    const user = localStorage.getItem('aretiUser');\r\n    if (user) {\r\n      const userData = JSON.parse(user);\r\n      const now = new Date().getTime();\r\n      // If token is relatively fresh (less than 5 minutes old), consider authenticated\r\n      if (now - userData.timestamp < 5 * 60 * 1000) {\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    // Otherwise check Keycloak token\r\n    return !!keycloak.token;\r\n  },\r\n\r\n  // Get user profile\r\n  getUserProfile: () => {\r\n    const user = localStorage.getItem('aretiUser');\r\n    return user ? JSON.parse(user) : null;\r\n  },\r\n\r\n  // Get authorization header for API requests\r\n  getAuthHeader: () => {\r\n    const user = AuthService.getUserProfile();\r\n    if (!user) return {};\r\n    \r\n    return {\r\n      'Authorization': `Bearer ${user.token}`\r\n    };\r\n  },\r\n  \r\n  // Check token validity\r\n  hasValidToken: () => {\r\n    const user = localStorage.getItem('aretiUser');\r\n    if (!user) {\r\n      return false;\r\n    }\r\n    \r\n    const userData = JSON.parse(user);\r\n    const now = new Date().getTime();\r\n    // Check if token is expired (24 hour validity)\r\n    return now - userData.timestamp < 24 * 60 * 60 * 1000;\r\n  }\r\n};\r\n\r\nexport default AuthService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}