{"ast":null,"code":"import Keycloak from 'keycloak-js';\nimport axios from 'axios';\n\n// Keycloak initialization options\nconst keycloakConfig = {\n  url: 'http://localhost:8080',\n  realm: 'areti-alliance',\n  clientId: 'areti-crm-client'\n};\n\n// Initialize Keycloak\nconst keycloak = new Keycloak(keycloakConfig);\n\n// Authentication service\nconst AuthService = {\n  // Initialize Keycloak\n  init: () => {\n    return new Promise((resolve, reject) => {\n      keycloak.init({\n        onLoad: 'check-sso',\n        silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n        pkceMethod: 'S256',\n        enablelogging: true\n      }).then(authenticated => {\n        console.log('Keycloak init result:', authenticated);\n        if (authenticated) {\n          console.log('User is authenticated, exchanging token...');\n          // Exchange Keycloak token for app session token\n          AuthService.exchangeToken().then(() => {\n            console.log('Token exchange successful');\n            resolve(authenticated);\n          }).catch(err => {\n            console.error('Token exchange error:', err);\n            // Still resolve as true since Keycloak authenticated the user\n            localStorage.setItem('authError', 'Token exchange failed');\n            resolve(authenticated);\n          });\n        } else {\n          console.log('User is not authenticated');\n          resolve(authenticated);\n        }\n      }).catch(error => {\n        console.error('Keycloak init error:', error);\n        reject(error);\n      });\n    });\n  },\n  // Log in\n  login: () => {\n    keycloak.login();\n  },\n  // Log out\n  logout: () => {\n    // Clear local tokens\n    localStorage.removeItem('aretiUser');\n    // Logout from Keycloak\n    keycloak.logout();\n  },\n  // Check if authenticated\n  isAuthenticated: () => {\n    return !!keycloak.token;\n  },\n  // Exchange Keycloak token for app session token\n  exchangeToken: async () => {\n    try {\n      const response = await axios.post('http://localhost:4000/auth/token', {\n        token: keycloak.token\n      });\n      const {\n        token\n      } = response.data;\n\n      // Parse token to get user info\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const payload = JSON.parse(window.atob(base64));\n\n      // Store in localStorage\n      localStorage.setItem('aretiUser', JSON.stringify({\n        email: payload.email,\n        name: payload.name,\n        role: payload.role,\n        token: token,\n        timestamp: new Date().getTime()\n      }));\n      return token;\n    } catch (error) {\n      console.error('Token exchange error:', error);\n      throw error;\n    }\n  },\n  // Get user profile\n  getUserProfile: () => {\n    const user = localStorage.getItem('aretiUser');\n    return user ? JSON.parse(user) : null;\n  },\n  // Check if token is valid\n  hasValidToken: () => {\n    const user = localStorage.getItem('aretiUser');\n    if (!user) return false;\n    const userData = JSON.parse(user);\n    const now = new Date().getTime();\n    // Check if token is expired (24 hour validity)\n    return now - userData.timestamp < 24 * 60 * 60 * 1000;\n  },\n  // Get authorization header\n  getAuthHeader: () => {\n    const user = localStorage.getItem('aretiUser');\n    if (!user) return {};\n    const userData = JSON.parse(user);\n    return {\n      'Authorization': `Bearer ${userData.token}`\n    };\n  }\n};\nexport default AuthService;","map":{"version":3,"names":["Keycloak","axios","keycloakConfig","url","realm","clientId","keycloak","AuthService","init","Promise","resolve","reject","onLoad","silentCheckSsoRedirectUri","window","location","origin","pkceMethod","enablelogging","then","authenticated","console","log","exchangeToken","catch","err","error","localStorage","setItem","login","logout","removeItem","isAuthenticated","token","response","post","data","base64Url","split","base64","replace","payload","JSON","parse","atob","stringify","email","name","role","timestamp","Date","getTime","getUserProfile","user","getItem","hasValidToken","userData","now","getAuthHeader"],"sources":["C:/Users/Administrator/Desktop/aretialliance/areti-dash-crm/src/services/keycloak.js"],"sourcesContent":["import Keycloak from 'keycloak-js';\r\nimport axios from 'axios';\r\n\r\n// Keycloak initialization options\r\nconst keycloakConfig = {\r\n  url: 'http://localhost:8080',\r\n  realm: 'areti-alliance',\r\n  clientId: 'areti-crm-client'\r\n};\r\n\r\n// Initialize Keycloak\r\nconst keycloak = new Keycloak(keycloakConfig);\r\n\r\n// Authentication service\r\nconst AuthService = {\r\n  // Initialize Keycloak\r\n  init: () => {\r\n    return new Promise((resolve, reject) => {\r\n      keycloak.init({\r\n        onLoad: 'check-sso',\r\n        silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\r\n        pkceMethod: 'S256',\r\n        enablelogging: true \r\n      })\r\n        .then(authenticated => {\r\n          console.log('Keycloak init result:', authenticated);\r\n          if (authenticated) {\r\n             console.log('User is authenticated, exchanging token...');\r\n            // Exchange Keycloak token for app session token\r\n            AuthService.exchangeToken().then(() => {\r\n              console.log('Token exchange successful');\r\n              resolve(authenticated);\r\n            }).catch(err => {\r\n              console.error('Token exchange error:', err);\r\n              // Still resolve as true since Keycloak authenticated the user\r\n              localStorage.setItem('authError', 'Token exchange failed');\r\n              resolve(authenticated);\r\n            });\r\n          } else {\r\n            console.log('User is not authenticated');\r\n            resolve(authenticated);\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error('Keycloak init error:', error);\r\n          reject(error);\r\n        });\r\n    });\r\n  },\r\n\r\n  // Log in\r\n  login: () => {\r\n    keycloak.login();\r\n  },\r\n\r\n  // Log out\r\n  logout: () => {\r\n    // Clear local tokens\r\n    localStorage.removeItem('aretiUser');\r\n    // Logout from Keycloak\r\n    keycloak.logout();\r\n  },\r\n\r\n  // Check if authenticated\r\n  isAuthenticated: () => {\r\n    return !!keycloak.token;\r\n  },\r\n\r\n  // Exchange Keycloak token for app session token\r\n  exchangeToken: async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:4000/auth/token', {\r\n        token: keycloak.token\r\n      });\r\n\r\n      const { token } = response.data;\r\n      \r\n      // Parse token to get user info\r\n      const base64Url = token.split('.')[1];\r\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n      const payload = JSON.parse(window.atob(base64));\r\n      \r\n      // Store in localStorage\r\n      localStorage.setItem('aretiUser', JSON.stringify({\r\n        email: payload.email,\r\n        name: payload.name,\r\n        role: payload.role,\r\n        token: token,\r\n        timestamp: new Date().getTime()\r\n      }));\r\n      \r\n      return token;\r\n    } catch (error) {\r\n      console.error('Token exchange error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get user profile\r\n  getUserProfile: () => {\r\n    const user = localStorage.getItem('aretiUser');\r\n    return user ? JSON.parse(user) : null;\r\n  },\r\n\r\n  // Check if token is valid\r\n  hasValidToken: () => {\r\n    const user = localStorage.getItem('aretiUser');\r\n    if (!user) return false;\r\n    \r\n    const userData = JSON.parse(user);\r\n    const now = new Date().getTime();\r\n    // Check if token is expired (24 hour validity)\r\n    return now - userData.timestamp < 24 * 60 * 60 * 1000;\r\n  },\r\n\r\n  // Get authorization header\r\n  getAuthHeader: () => {\r\n    const user = localStorage.getItem('aretiUser');\r\n    if (!user) return {};\r\n    \r\n    const userData = JSON.parse(user);\r\n    return {\r\n      'Authorization': `Bearer ${userData.token}`\r\n    };\r\n  }\r\n};\r\n\r\nexport default AuthService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}