{"ast":null,"code":"import Keycloak from 'keycloak-js';\nimport axios from 'axios';\n\n// Debugging helper\nfunction debugLog(...args) {\n  console.log('[Keycloak Debug]', ...args);\n}\n\n// Keycloak configuration\nconst keycloakConfig = {\n  url: 'http://localhost:8080',\n  realm: 'areti-alliance',\n  clientId: 'areti-crm-client'\n};\n\n// Create a module-level mock user in case Keycloak fails\nconst mockUser = {\n  name: 'Development User',\n  email: 'dev@example.com',\n  role: 'admin',\n  token: 'mock-token-for-development',\n  timestamp: new Date().getTime()\n};\n\n// Authentication service with simplified approach\nconst AuthService = {\n  // Initialize - always succeeds by design\n  init: () => {\n    debugLog('Simplified init called');\n\n    // Check if we already have a user in localStorage\n    const existingUser = localStorage.getItem('aretiUser') || localStorage.getItem('aretiUser_backup');\n    if (existingUser) {\n      debugLog('Found existing user in localStorage');\n      return Promise.resolve(true);\n    }\n\n    // Store mock user for development\n    debugLog('Storing mock user for development');\n    localStorage.setItem('aretiUser_backup', JSON.stringify(mockUser));\n\n    // Always return success\n    return Promise.resolve(true);\n  },\n  // Login - simplified for development\n  login: () => {\n    debugLog('Simplified login called');\n\n    // Store mock user\n    localStorage.setItem('aretiUser_backup', JSON.stringify(mockUser));\n\n    // Reload the page to simulate login completion\n    window.location.reload();\n  },\n  // Logout - simplified for development\n  logout: () => {\n    debugLog('Simplified logout called');\n\n    // Clear storage\n    localStorage.removeItem('aretiUser');\n    localStorage.removeItem('aretiUser_backup');\n\n    // Reload the page\n    window.location.reload();\n  },\n  // Always returns mock user\n  getUserProfile: () => {\n    debugLog('Getting user profile');\n\n    // Try from localStorage first\n    const user = localStorage.getItem('aretiUser') || localStorage.getItem('aretiUser_backup');\n    if (user) {\n      try {\n        return JSON.parse(user);\n      } catch (error) {\n        debugLog('Error parsing user data, returning mock user');\n      }\n    }\n\n    // Return mock user as fallback\n    return mockUser;\n  },\n  // Always return authenticated for development\n  isAuthenticated: () => {\n    return true;\n  },\n  // Return mock auth header\n  getAuthHeader: () => {\n    return {\n      'Authorization': `Bearer ${mockUser.token}`\n    };\n  }\n};\nexport default AuthService;","map":{"version":3,"names":["Keycloak","axios","debugLog","args","console","log","keycloakConfig","url","realm","clientId","mockUser","name","email","role","token","timestamp","Date","getTime","AuthService","init","existingUser","localStorage","getItem","Promise","resolve","setItem","JSON","stringify","login","window","location","reload","logout","removeItem","getUserProfile","user","parse","error","isAuthenticated","getAuthHeader"],"sources":["C:/Users/Administrator/Desktop/aretialliance/areti-dash-crm/src/services/keycloak.js"],"sourcesContent":["import Keycloak from 'keycloak-js';\r\nimport axios from 'axios';\r\n\r\n// Debugging helper\r\nfunction debugLog(...args) {\r\n  console.log('[Keycloak Debug]', ...args);\r\n}\r\n\r\n// Keycloak configuration\r\nconst keycloakConfig = {\r\n  url: 'http://localhost:8080',\r\n  realm: 'areti-alliance',\r\n  clientId: 'areti-crm-client'\r\n};\r\n\r\n// Create a module-level mock user in case Keycloak fails\r\nconst mockUser = {\r\n  name: 'Development User',\r\n  email: 'dev@example.com',\r\n  role: 'admin',\r\n  token: 'mock-token-for-development',\r\n  timestamp: new Date().getTime()\r\n};\r\n\r\n// Authentication service with simplified approach\r\nconst AuthService = {\r\n  // Initialize - always succeeds by design\r\n  init: () => {\r\n    debugLog('Simplified init called');\r\n    \r\n    // Check if we already have a user in localStorage\r\n    const existingUser = localStorage.getItem('aretiUser') || localStorage.getItem('aretiUser_backup');\r\n    if (existingUser) {\r\n      debugLog('Found existing user in localStorage');\r\n      return Promise.resolve(true);\r\n    }\r\n    \r\n    // Store mock user for development\r\n    debugLog('Storing mock user for development');\r\n    localStorage.setItem('aretiUser_backup', JSON.stringify(mockUser));\r\n    \r\n    // Always return success\r\n    return Promise.resolve(true);\r\n  },\r\n\r\n  // Login - simplified for development\r\n  login: () => {\r\n    debugLog('Simplified login called');\r\n    \r\n    // Store mock user\r\n    localStorage.setItem('aretiUser_backup', JSON.stringify(mockUser));\r\n    \r\n    // Reload the page to simulate login completion\r\n    window.location.reload();\r\n  },\r\n\r\n  // Logout - simplified for development\r\n  logout: () => {\r\n    debugLog('Simplified logout called');\r\n    \r\n    // Clear storage\r\n    localStorage.removeItem('aretiUser');\r\n    localStorage.removeItem('aretiUser_backup');\r\n    \r\n    // Reload the page\r\n    window.location.reload();\r\n  },\r\n\r\n  // Always returns mock user\r\n  getUserProfile: () => {\r\n    debugLog('Getting user profile');\r\n    \r\n    // Try from localStorage first\r\n    const user = localStorage.getItem('aretiUser') || localStorage.getItem('aretiUser_backup');\r\n    if (user) {\r\n      try {\r\n        return JSON.parse(user);\r\n      } catch (error) {\r\n        debugLog('Error parsing user data, returning mock user');\r\n      }\r\n    }\r\n    \r\n    // Return mock user as fallback\r\n    return mockUser;\r\n  },\r\n\r\n  // Always return authenticated for development\r\n  isAuthenticated: () => {\r\n    return true;\r\n  },\r\n\r\n  // Return mock auth header\r\n  getAuthHeader: () => {\r\n    return {\r\n      'Authorization': `Bearer ${mockUser.token}`\r\n    };\r\n  }\r\n};\r\n\r\nexport default AuthService;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,aAAa;AAClC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,SAASC,QAAQA,CAAC,GAAGC,IAAI,EAAE;EACzBC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE,GAAGF,IAAI,CAAC;AAC1C;;AAEA;AACA,MAAMG,cAAc,GAAG;EACrBC,GAAG,EAAE,uBAAuB;EAC5BC,KAAK,EAAE,gBAAgB;EACvBC,QAAQ,EAAE;AACZ,CAAC;;AAED;AACA,MAAMC,QAAQ,GAAG;EACfC,IAAI,EAAE,kBAAkB;EACxBC,KAAK,EAAE,iBAAiB;EACxBC,IAAI,EAAE,OAAO;EACbC,KAAK,EAAE,4BAA4B;EACnCC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC;AAChC,CAAC;;AAED;AACA,MAAMC,WAAW,GAAG;EAClB;EACAC,IAAI,EAAEA,CAAA,KAAM;IACVjB,QAAQ,CAAC,wBAAwB,CAAC;;IAElC;IACA,MAAMkB,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,IAAID,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;IAClG,IAAIF,YAAY,EAAE;MAChBlB,QAAQ,CAAC,qCAAqC,CAAC;MAC/C,OAAOqB,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;IAC9B;;IAEA;IACAtB,QAAQ,CAAC,mCAAmC,CAAC;IAC7CmB,YAAY,CAACI,OAAO,CAAC,kBAAkB,EAAEC,IAAI,CAACC,SAAS,CAACjB,QAAQ,CAAC,CAAC;;IAElE;IACA,OAAOa,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;EAC9B,CAAC;EAED;EACAI,KAAK,EAAEA,CAAA,KAAM;IACX1B,QAAQ,CAAC,yBAAyB,CAAC;;IAEnC;IACAmB,YAAY,CAACI,OAAO,CAAC,kBAAkB,EAAEC,IAAI,CAACC,SAAS,CAACjB,QAAQ,CAAC,CAAC;;IAElE;IACAmB,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;EAC1B,CAAC;EAED;EACAC,MAAM,EAAEA,CAAA,KAAM;IACZ9B,QAAQ,CAAC,0BAA0B,CAAC;;IAEpC;IACAmB,YAAY,CAACY,UAAU,CAAC,WAAW,CAAC;IACpCZ,YAAY,CAACY,UAAU,CAAC,kBAAkB,CAAC;;IAE3C;IACAJ,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;EAC1B,CAAC;EAED;EACAG,cAAc,EAAEA,CAAA,KAAM;IACpBhC,QAAQ,CAAC,sBAAsB,CAAC;;IAEhC;IACA,MAAMiC,IAAI,GAAGd,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,IAAID,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;IAC1F,IAAIa,IAAI,EAAE;MACR,IAAI;QACF,OAAOT,IAAI,CAACU,KAAK,CAACD,IAAI,CAAC;MACzB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdnC,QAAQ,CAAC,8CAA8C,CAAC;MAC1D;IACF;;IAEA;IACA,OAAOQ,QAAQ;EACjB,CAAC;EAED;EACA4B,eAAe,EAAEA,CAAA,KAAM;IACrB,OAAO,IAAI;EACb,CAAC;EAED;EACAC,aAAa,EAAEA,CAAA,KAAM;IACnB,OAAO;MACL,eAAe,EAAE,UAAU7B,QAAQ,CAACI,KAAK;IAC3C,CAAC;EACH;AACF,CAAC;AAED,eAAeI,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}