{"ast":null,"code":"import Keycloak from'keycloak-js';import axios from'axios';// Debugging helper\nfunction debugLog(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}console.log('[Keycloak Debug]',...args);}// Keycloak configuration\nconst keycloakConfig={url:'http://localhost:8080',realm:'areti-alliance',clientId:'areti-crm-client'};// Create a module-level mock user in case Keycloak fails\nconst mockUser={name:'Development User',email:'dev@example.com',role:'admin',token:'mock-token-for-development',timestamp:new Date().getTime()};// Authentication service with simplified approach\nconst AuthService={// Initialize - always succeeds by design\ninit:()=>{debugLog('Simplified init called');// Check if we already have a user in localStorage\nconst existingUser=localStorage.getItem('aretiUser')||localStorage.getItem('aretiUser_backup');if(existingUser){debugLog('Found existing user in localStorage');return Promise.resolve(true);}// Store mock user for development\ndebugLog('Storing mock user for development');localStorage.setItem('aretiUser_backup',JSON.stringify(mockUser));// Always return success\nreturn Promise.resolve(true);},// Login - simplified for development\nlogin:()=>{debugLog('Simplified login called');// Store mock user\nlocalStorage.setItem('aretiUser_backup',JSON.stringify(mockUser));// Reload the page to simulate login completion\nwindow.location.reload();},// Logout - simplified for development\nlogout:()=>{debugLog('Simplified logout called');// Clear storage\nlocalStorage.removeItem('aretiUser');localStorage.removeItem('aretiUser_backup');// Reload the page\nwindow.location.reload();},// Always returns mock user\ngetUserProfile:()=>{debugLog('Getting user profile');// Try from localStorage first\nconst user=localStorage.getItem('aretiUser')||localStorage.getItem('aretiUser_backup');if(user){try{return JSON.parse(user);}catch(error){debugLog('Error parsing user data, returning mock user');}}// Return mock user as fallback\nreturn mockUser;},// Always return authenticated for development\nisAuthenticated:()=>{return true;},// Return mock auth header\ngetAuthHeader:()=>{return{'Authorization':`Bearer ${mockUser.token}`};}};export default AuthService;","map":{"version":3,"names":["Keycloak","axios","debugLog","_len","arguments","length","args","Array","_key","console","log","keycloakConfig","url","realm","clientId","mockUser","name","email","role","token","timestamp","Date","getTime","AuthService","init","existingUser","localStorage","getItem","Promise","resolve","setItem","JSON","stringify","login","window","location","reload","logout","removeItem","getUserProfile","user","parse","error","isAuthenticated","getAuthHeader"],"sources":["C:/Users/Administrator/Desktop/aretialliance/areti-dash-crm/src/services/keycloak.js"],"sourcesContent":["import Keycloak from 'keycloak-js';\r\nimport axios from 'axios';\r\n\r\n// Debugging helper\r\nfunction debugLog(...args) {\r\n  console.log('[Keycloak Debug]', ...args);\r\n}\r\n\r\n// Keycloak configuration\r\nconst keycloakConfig = {\r\n  url: 'http://localhost:8080',\r\n  realm: 'areti-alliance',\r\n  clientId: 'areti-crm-client'\r\n};\r\n\r\n// Create a module-level mock user in case Keycloak fails\r\nconst mockUser = {\r\n  name: 'Development User',\r\n  email: 'dev@example.com',\r\n  role: 'admin',\r\n  token: 'mock-token-for-development',\r\n  timestamp: new Date().getTime()\r\n};\r\n\r\n// Authentication service with simplified approach\r\nconst AuthService = {\r\n  // Initialize - always succeeds by design\r\n  init: () => {\r\n    debugLog('Simplified init called');\r\n    \r\n    // Check if we already have a user in localStorage\r\n    const existingUser = localStorage.getItem('aretiUser') || localStorage.getItem('aretiUser_backup');\r\n    if (existingUser) {\r\n      debugLog('Found existing user in localStorage');\r\n      return Promise.resolve(true);\r\n    }\r\n    \r\n    // Store mock user for development\r\n    debugLog('Storing mock user for development');\r\n    localStorage.setItem('aretiUser_backup', JSON.stringify(mockUser));\r\n    \r\n    // Always return success\r\n    return Promise.resolve(true);\r\n  },\r\n\r\n  // Login - simplified for development\r\n  login: () => {\r\n    debugLog('Simplified login called');\r\n    \r\n    // Store mock user\r\n    localStorage.setItem('aretiUser_backup', JSON.stringify(mockUser));\r\n    \r\n    // Reload the page to simulate login completion\r\n    window.location.reload();\r\n  },\r\n\r\n  // Logout - simplified for development\r\n  logout: () => {\r\n    debugLog('Simplified logout called');\r\n    \r\n    // Clear storage\r\n    localStorage.removeItem('aretiUser');\r\n    localStorage.removeItem('aretiUser_backup');\r\n    \r\n    // Reload the page\r\n    window.location.reload();\r\n  },\r\n\r\n  // Always returns mock user\r\n  getUserProfile: () => {\r\n    debugLog('Getting user profile');\r\n    \r\n    // Try from localStorage first\r\n    const user = localStorage.getItem('aretiUser') || localStorage.getItem('aretiUser_backup');\r\n    if (user) {\r\n      try {\r\n        return JSON.parse(user);\r\n      } catch (error) {\r\n        debugLog('Error parsing user data, returning mock user');\r\n      }\r\n    }\r\n    \r\n    // Return mock user as fallback\r\n    return mockUser;\r\n  },\r\n\r\n  // Always return authenticated for development\r\n  isAuthenticated: () => {\r\n    return true;\r\n  },\r\n\r\n  // Return mock auth header\r\n  getAuthHeader: () => {\r\n    return {\r\n      'Authorization': `Bearer ${mockUser.token}`\r\n    };\r\n  }\r\n};\r\n\r\nexport default AuthService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}