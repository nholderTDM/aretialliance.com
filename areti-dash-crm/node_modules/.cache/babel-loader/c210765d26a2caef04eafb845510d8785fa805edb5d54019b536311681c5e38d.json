{"ast":null,"code":"import Keycloak from 'keycloak-js';\nimport axios from 'axios';\n\n// Configuration from environment variables\nconst KEYCLOAK_URL = process.env.REACT_APP_KEYCLOAK_URL || 'https://auth.aretialliance.com';\nconst KEYCLOAK_REALM = process.env.REACT_APP_KEYCLOAK_REALM || 'areti-alliance';\nconst KEYCLOAK_CLIENT_ID = process.env.REACT_APP_KEYCLOAK_CLIENT_ID || 'areti-crm-client';\nconst API_URL = process.env.REACT_APP_API_URL || 'https://api.aretialliance.com';\n\n// Debugging helper\nfunction debugLog(...args) {\n  if (process.env.NODE_ENV !== 'production') {\n    console.log('[Auth]', ...args);\n  }\n}\n\n// Initialize Keycloak instance\nconst keycloakConfig = {\n  url: KEYCLOAK_URL,\n  realm: KEYCLOAK_REALM,\n  clientId: KEYCLOAK_CLIENT_ID\n};\nconst keycloak = new Keycloak(keycloakConfig);\n\n// Authentication service\nconst AuthService = {\n  // Initialize Keycloak with proper configuration\n  init: () => {\n    debugLog('Initializing Keycloak');\n    return new Promise((resolve, reject) => {\n      keycloak.init({\n        onLoad: 'check-sso',\n        silentCheckSsoRedirectUri: window.location.origin + '/dashboard/silent-check-sso.html',\n        pkceMethod: 'S256',\n        checkLoginIframe: false\n      }).then(authenticated => {\n        debugLog('Keycloak initialized, authenticated:', authenticated);\n        if (authenticated) {\n          debugLog('User authenticated with valid token');\n\n          // Store basic user info from token\n          const basicUserInfo = {\n            name: keycloak.tokenParsed.preferred_username || keycloak.tokenParsed.name,\n            email: keycloak.tokenParsed.email || keycloak.tokenParsed.preferred_username,\n            role: AuthService.getUserRole(keycloak.tokenParsed),\n            token: keycloak.token,\n            timestamp: new Date().getTime()\n          };\n          localStorage.setItem('aretiUser', JSON.stringify(basicUserInfo));\n\n          // Setup token refresh\n          AuthService.setupTokenRefresh();\n          resolve(authenticated);\n        } else {\n          debugLog('User not authenticated');\n          localStorage.removeItem('aretiUser');\n          resolve(authenticated);\n        }\n      }).catch(error => {\n        debugLog('Keycloak init error:', error);\n        reject(error);\n      });\n    });\n  },\n  // Get user role from token\n  getUserRole: tokenParsed => {\n    if (!tokenParsed || !tokenParsed.realm_access) {\n      return 'user';\n    }\n    const roles = tokenParsed.realm_access.roles || [];\n    if (roles.includes('admin')) return 'admin';\n    if (roles.includes('manager')) return 'manager';\n    return 'user';\n  },\n  // Setup automatic token refresh\n  setupTokenRefresh: () => {\n    keycloak.onTokenExpired = () => {\n      debugLog('Token expired, refreshing...');\n      keycloak.updateToken(30).then(refreshed => {\n        if (refreshed) {\n          debugLog('Token refreshed');\n          // Update stored user info with new token\n          const user = AuthService.getUserProfile();\n          if (user) {\n            user.token = keycloak.token;\n            user.timestamp = new Date().getTime();\n            localStorage.setItem('aretiUser', JSON.stringify(user));\n          }\n        } else {\n          debugLog('Token not refreshed, still valid');\n        }\n      }).catch(error => {\n        debugLog('Failed to refresh token:', error);\n        // Force re-login on refresh failure\n        AuthService.login();\n      });\n    };\n  },\n  // Log in\n  login: () => {\n    debugLog('Starting login process');\n    keycloak.login({\n      redirectUri: window.location.origin + '/dashboard'\n    });\n  },\n  // Log out\n  logout: () => {\n    debugLog('Logging out');\n    localStorage.removeItem('aretiUser');\n    keycloak.logout({\n      redirectUri: window.location.origin\n    });\n  },\n  // Check if authenticated\n  isAuthenticated: () => {\n    // Check local storage first\n    const user = localStorage.getItem('aretiUser');\n    if (user) {\n      const userData = JSON.parse(user);\n      const now = new Date().getTime();\n      // If token is relatively fresh (less than 5 minutes old), consider authenticated\n      if (now - userData.timestamp < 5 * 60 * 1000) {\n        return true;\n      }\n    }\n\n    // Otherwise check Keycloak token\n    return !!keycloak.token;\n  },\n  // Get user profile\n  getUserProfile: () => {\n    const user = localStorage.getItem('aretiUser');\n    return user ? JSON.parse(user) : null;\n  },\n  // Get authorization header for API requests\n  getAuthHeader: () => {\n    const user = AuthService.getUserProfile();\n    if (!user) return {};\n    return {\n      'Authorization': `Bearer ${user.token}`\n    };\n  },\n  // Check token validity\n  hasValidToken: () => {\n    const user = localStorage.getItem('aretiUser');\n    if (!user) {\n      return false;\n    }\n    const userData = JSON.parse(user);\n    const now = new Date().getTime();\n    // Check if token is expired (24 hour validity)\n    return now - userData.timestamp < 24 * 60 * 60 * 1000;\n  }\n};\nexport default AuthService;","map":{"version":3,"names":["Keycloak","axios","KEYCLOAK_URL","process","env","REACT_APP_KEYCLOAK_URL","KEYCLOAK_REALM","REACT_APP_KEYCLOAK_REALM","KEYCLOAK_CLIENT_ID","REACT_APP_KEYCLOAK_CLIENT_ID","API_URL","REACT_APP_API_URL","debugLog","args","NODE_ENV","console","log","keycloakConfig","url","realm","clientId","keycloak","AuthService","init","Promise","resolve","reject","onLoad","silentCheckSsoRedirectUri","window","location","origin","pkceMethod","checkLoginIframe","then","authenticated","basicUserInfo","name","tokenParsed","preferred_username","email","role","getUserRole","token","timestamp","Date","getTime","localStorage","setItem","JSON","stringify","setupTokenRefresh","removeItem","catch","error","realm_access","roles","includes","onTokenExpired","updateToken","refreshed","user","getUserProfile","login","redirectUri","logout","isAuthenticated","getItem","userData","parse","now","getAuthHeader","hasValidToken"],"sources":["C:/Users/Administrator/Desktop/aretialliance/areti-dash-crm/src/services/keycloak.js"],"sourcesContent":["import Keycloak from 'keycloak-js';\r\nimport axios from 'axios';\r\n\r\n// Configuration from environment variables\r\nconst KEYCLOAK_URL = process.env.REACT_APP_KEYCLOAK_URL || 'https://auth.aretialliance.com';\r\nconst KEYCLOAK_REALM = process.env.REACT_APP_KEYCLOAK_REALM || 'areti-alliance';\r\nconst KEYCLOAK_CLIENT_ID = process.env.REACT_APP_KEYCLOAK_CLIENT_ID || 'areti-crm-client';\r\nconst API_URL = process.env.REACT_APP_API_URL || 'https://api.aretialliance.com';\r\n\r\n// Debugging helper\r\nfunction debugLog(...args) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    console.log('[Auth]', ...args);\r\n  }\r\n}\r\n\r\n// Initialize Keycloak instance\r\nconst keycloakConfig = {\r\n  url: KEYCLOAK_URL,\r\n  realm: KEYCLOAK_REALM,\r\n  clientId: KEYCLOAK_CLIENT_ID\r\n};\r\n\r\nconst keycloak = new Keycloak(keycloakConfig);\r\n\r\n// Authentication service\r\nconst AuthService = {\r\n  // Initialize Keycloak with proper configuration\r\n  init: () => {\r\n    debugLog('Initializing Keycloak');\r\n    return new Promise((resolve, reject) => {\r\n      keycloak.init({\r\n        onLoad: 'check-sso',\r\n        silentCheckSsoRedirectUri: window.location.origin + '/dashboard/silent-check-sso.html',\r\n        pkceMethod: 'S256',\r\n        checkLoginIframe: false\r\n      })\r\n        .then(authenticated => {\r\n          debugLog('Keycloak initialized, authenticated:', authenticated);\r\n          \r\n          if (authenticated) {\r\n            debugLog('User authenticated with valid token');\r\n            \r\n            // Store basic user info from token\r\n            const basicUserInfo = {\r\n              name: keycloak.tokenParsed.preferred_username || keycloak.tokenParsed.name,\r\n              email: keycloak.tokenParsed.email || keycloak.tokenParsed.preferred_username,\r\n              role: AuthService.getUserRole(keycloak.tokenParsed),\r\n              token: keycloak.token,\r\n              timestamp: new Date().getTime()\r\n            };\r\n            \r\n            localStorage.setItem('aretiUser', JSON.stringify(basicUserInfo));\r\n            \r\n            // Setup token refresh\r\n            AuthService.setupTokenRefresh();\r\n            \r\n            resolve(authenticated);\r\n          } else {\r\n            debugLog('User not authenticated');\r\n            localStorage.removeItem('aretiUser');\r\n            resolve(authenticated);\r\n          }\r\n        })\r\n        .catch(error => {\r\n          debugLog('Keycloak init error:', error);\r\n          reject(error);\r\n        });\r\n    });\r\n  },\r\n\r\n  // Get user role from token\r\n  getUserRole: (tokenParsed) => {\r\n    if (!tokenParsed || !tokenParsed.realm_access) {\r\n      return 'user';\r\n    }\r\n    \r\n    const roles = tokenParsed.realm_access.roles || [];\r\n    if (roles.includes('admin')) return 'admin';\r\n    if (roles.includes('manager')) return 'manager';\r\n    return 'user';\r\n  },\r\n\r\n  // Setup automatic token refresh\r\n  setupTokenRefresh: () => {\r\n    keycloak.onTokenExpired = () => {\r\n      debugLog('Token expired, refreshing...');\r\n      keycloak.updateToken(30).then((refreshed) => {\r\n        if (refreshed) {\r\n          debugLog('Token refreshed');\r\n          // Update stored user info with new token\r\n          const user = AuthService.getUserProfile();\r\n          if (user) {\r\n            user.token = keycloak.token;\r\n            user.timestamp = new Date().getTime();\r\n            localStorage.setItem('aretiUser', JSON.stringify(user));\r\n          }\r\n        } else {\r\n          debugLog('Token not refreshed, still valid');\r\n        }\r\n      }).catch(error => {\r\n        debugLog('Failed to refresh token:', error);\r\n        // Force re-login on refresh failure\r\n        AuthService.login();\r\n      });\r\n    };\r\n  },\r\n\r\n  // Log in\r\n  login: () => {\r\n    debugLog('Starting login process');\r\n    keycloak.login({\r\n      redirectUri: window.location.origin + '/dashboard'\r\n    });\r\n  },\r\n\r\n  // Log out\r\n  logout: () => {\r\n    debugLog('Logging out');\r\n    localStorage.removeItem('aretiUser');\r\n    keycloak.logout({\r\n      redirectUri: window.location.origin\r\n    });\r\n  },\r\n\r\n  // Check if authenticated\r\n  isAuthenticated: () => {\r\n    // Check local storage first\r\n    const user = localStorage.getItem('aretiUser');\r\n    if (user) {\r\n      const userData = JSON.parse(user);\r\n      const now = new Date().getTime();\r\n      // If token is relatively fresh (less than 5 minutes old), consider authenticated\r\n      if (now - userData.timestamp < 5 * 60 * 1000) {\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    // Otherwise check Keycloak token\r\n    return !!keycloak.token;\r\n  },\r\n\r\n  // Get user profile\r\n  getUserProfile: () => {\r\n    const user = localStorage.getItem('aretiUser');\r\n    return user ? JSON.parse(user) : null;\r\n  },\r\n\r\n  // Get authorization header for API requests\r\n  getAuthHeader: () => {\r\n    const user = AuthService.getUserProfile();\r\n    if (!user) return {};\r\n    \r\n    return {\r\n      'Authorization': `Bearer ${user.token}`\r\n    };\r\n  },\r\n  \r\n  // Check token validity\r\n  hasValidToken: () => {\r\n    const user = localStorage.getItem('aretiUser');\r\n    if (!user) {\r\n      return false;\r\n    }\r\n    \r\n    const userData = JSON.parse(user);\r\n    const now = new Date().getTime();\r\n    // Check if token is expired (24 hour validity)\r\n    return now - userData.timestamp < 24 * 60 * 60 * 1000;\r\n  }\r\n};\r\n\r\nexport default AuthService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}